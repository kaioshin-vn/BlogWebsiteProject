@page "/managementbooking"
@using Data.Database.Table
@using Newtonsoft.Json

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@attribute [Authorize(Roles = "Admin")]
<style>
    .GrayBold{
        font-weight:bold;
        color:gray;
    }
    .BlackBold{
        font-weight:bold;
        color:black;
        padding-top:5px;
    }
</style>
@if (!isLoaded)
{
    <Client.Components.ComponentCustom.LoadingLocal></Client.Components.ComponentCustom.LoadingLocal>
}
else
{
    <MudText Typo="Typo.h6" Style="font-weight:bold" Class="my-5">Quản lý đơn đặt hàng</MudText>

    <MudContainer>
        @if (ListRegisWaite.Count != 0)
        {
            <MudTable Dense="true" Items="ListRegisWaite">
                <HeaderContent>
                    <MudTh Style="font-weight: 900;">Người dùng</MudTh>
                    <MudTh Style="font-weight: 900;">Gói dịch vụ</MudTh>
                    <MudTh Style="font-weight: 900;">Thời hạn</MudTh>
                    <MudTh Style="font-weight: 900;">Mức giá</MudTh>
                    <MudTh></MudTh> <!-- Nút GIA HẠN -->
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.User.FullName</MudTd>
                    <MudTd><b>@context.Name</b></MudTd>
                    <MudTd>@context.DurationDays ngày</MudTd>
                    <MudTd>@context.Price.ToString("N0", System.Globalization.CultureInfo.InvariantCulture) ₫</MudTd>

                    <MudTd>
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AcceptRegisService(context.Id)">Chi tiết</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudAlert Severity="Severity.Info">Không có yêu cầu quảng nào</MudAlert>
        }
    </MudContainer>
}
@code {
    List<RegistrationAdvertisement> ListRegisWaite = new List<RegistrationAdvertisement>();

    bool isLoaded;

    protected override async Task OnInitializedAsync()
    {
        await WaitBill();
        isLoaded = true;
    }

    async Task WaitBill()
    {
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await httpClient.GetStringAsync($"/getRegisWaitUser");

        ListRegisWaite = JsonConvert.DeserializeObject<List<RegistrationAdvertisement>>(response);
    }

    async Task AcceptRegisService(Guid Id)
    {
        NavigationManager.NavigateTo("/AcceptRegis/" + Id.ToString());
    }
}
