@page "/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlogWebsite.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage


@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navigationManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Đổi mật khẩu</PageTitle>

<h2>Đổi mật khẩu.</h2>
<hr />
<div class="form-floating mb-3">
	<input type="password" @bind="Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
	<label for="password" class="form-label">Mật khẩu</label>
</div>
<div class="form-floating mb-3">
	<input type="password" @bind="ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
	<label for="confirm-password" class="form-label">Xác nhận mật khẩu</label>
</div>
<button type="submit" class="w-100 btn btn-lg btn-primary" @onclick="OnValidSubmitAsync">Đổi mật khẩu</button>
@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger">@errorMessage </div>
}
@code {
	private IEnumerable<IdentityError>? identityErrors;
	[Required]
	[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
	[DataType(DataType.Password)]
	public string Password { get; set; }

	[DataType(DataType.Password)]
	[Display(Name = "Confirm password")]
	[Compare("Password", ErrorMessage = "Mật khẩu và mật khẩu xác nhận không khớp.")]
	public string ConfirmPassword { get; set; }
	private string errorMessage;


	private async Task OnValidSubmitAsync()
	{
		var email = await sessionStorage.GetItemAsync<string>("saveEmail");
		var user = await UserManager.FindByEmailAsync(email);
		if (user == null)
		{
			errorMessage = "user không tồn tại";
			StateHasChanged();
			return;
		}
		if (Password != ConfirmPassword)
		{
			errorMessage = "Mật khẩu và mật khẩu xác nhận không khớp.";
			StateHasChanged();
			return;
		}
		string newPassword = Password;
		var token = await UserManager.GeneratePasswordResetTokenAsync(user);
		var result = await UserManager.ResetPasswordAsync(user, token, newPassword);
		if (result.Succeeded)
		{
			Console.WriteLine("ok");
			navigationManager.NavigateTo("Account/Login");
		}
		else
		{
			foreach (var error in result.Errors)
			{
				Console.WriteLine(error.Description);
			}
		}
	}
}
