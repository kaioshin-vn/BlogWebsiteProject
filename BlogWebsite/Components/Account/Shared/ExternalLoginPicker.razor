@using BlogWebsite.Components.Account
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlogWebsite.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">
                article
                about setting up this ASP.NET application to support logging in via external services
            </a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <input type="hidden" name="__RequestVerificationToken" value="@AntiforgeryToken" />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <MudButton Class="field google" ButtonType="ButtonType.Submit" Color="Color.Default" Variant="Variant.Filled" name="provider" value="Google" title="Sử dụng tài khoản Google để đăng nhập">  <img src="/Img/Logo-google-icon-PNG.png" class="pe-5" style="width:15%">Đăng nhập bằng Google</MudButton>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];
    private string AntiforgeryToken;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
        var tokens = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext);
        AntiforgeryToken = tokens.RequestToken;
    }

}
