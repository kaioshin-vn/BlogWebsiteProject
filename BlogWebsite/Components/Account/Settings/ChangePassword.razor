@page "/Account/ChangePassword"
@using BlogWebsite.Data
@using Client.Components.Settings
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
<h2>Đổi mật khẩu</h2>
@if (showError)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe())">@MessageError</MudAlert>
}
@if (showSuccess)
{
    <MudAlert Severity="Severity.Success" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe())">@MessageSuccess</MudAlert>
}
<EditForm Model="@Input" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (hasOldPassword)
    {
        <div class="form-group">
            <label for="OldPassword">Mật khẩu cũ:</label>
            <InputText id="OldPassword" type="password" class="form-control" @bind-Value="Input.OldPassword" />
            <ValidationMessage For="@(() => Input.OldPassword)" />
        </div>
    }
    <div class="form-group">
        <label for="NewPassword">Mật khẩu mới:</label>
        <InputText id="NewPassword" type="password" class="form-control" @bind-Value="Input.NewPassword" />
        <ValidationMessage For="@(() => Input.NewPassword)" />
    </div>
    <div class="form-group">
        <label for="NewPassword">Xác nhận mật khẩu mới:</label>
        <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="Input.ConfirmPassword" />
        <ValidationMessage For="@(() => Input.ConfirmPassword)" />
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Đổi mật khẩu</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private ChangePasswordViewModel Input { get; set; } = new();
    public bool hasOldPassword { get; set; }
    public string Username { get; set; }
    public string MessageSuccess { get; set; }
    public string MessageError { get; set; }
    private bool showSuccess = true;
    private bool showError = true;

    private void CloseMe()
    {
        showError = false;
        showSuccess = false;
    }

    protected override async Task OnInitializedAsync()
    {
        showError = false;
        showSuccess = false;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            using (var context = ContextFactory.CreateDbContext())
            {
                var identityUser = await UserManager.FindByIdAsync(userId);
                if (identityUser != null)
                {
                    if (string.IsNullOrEmpty(identityUser.PasswordHash))
                    {
                        hasOldPassword = false;
                    }
                    else
                    {
                        hasOldPassword = true;
                    }
                    Input.Id = identityUser.Id;
                }
            }
        }
    }
    private async Task HandleValidSubmit()
    {
        // Xử lý lưu thông tin người dùng ở đây
        var user = await UserManager.FindByIdAsync(Input.Id.ToString());
        if (user != null)
        {
            if (user.PasswordHash != Input.OldPassword && hasOldPassword)
            {
                MessageError = "Mật khẩu cũ không đúng";
                showError = true;
                showSuccess = false;
                StateHasChanged();
                return;
            }
            else if (Input.NewPassword != Input.ConfirmPassword)
            {
                MessageError = "Mật khẩu xác nhận không đúng";
                showError = true;
                showSuccess = false;
                StateHasChanged();
                return;
            }
            user.PasswordHash = Input.ConfirmPassword;
            // Cập nhật người dùng
            var result = await UserManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                MessageSuccess = "Đổi mật khẩu thành công";
                showSuccess = true;
                showError = false;
                StateHasChanged();
            }
            else
            {
                var errors = string.Join(",", result.Errors);
                MessageError = errors;
                showError = true;
                showSuccess = false;
            }
        }
    }
}