@page "/Setting/ChangePassword"
@using BlogWebsite.Data
@using Client.Components.Settings
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject IMemoryCache MemoryCache
<h2>Đổi mật khẩu</h2> @if (showError)
{
     <MudAlert Severity="Severity.Error" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe())">@MessageError</MudAlert>
} @if (showSuccess)
{
     <MudAlert Severity="Severity.Success" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe())">@MessageSuccess</MudAlert>
} <EditForm Model="@Input" OnValidSubmit="@HandleValidSubmit"> <DataAnnotationsValidator /> <ValidationSummary /> @if (hasOldPassword)
    {
        <div class="form-group"> <MudTextField Class="mt-3" @bind-Value="Input.OldPassword" Label="Mật khẩu cũ:" Variant="Variant.Outlined" AdornmentIcon="@PasswordInputIcon" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="Fix" AdornmentAriaLabel="Hiện mật khẩu" name="Input.OldPassword" /> <ValidationMessage For="@(() => Input.OldPassword)" /> </div>
    } <div class="form-group"> <MudTextField Class="mt-3" @bind-Value="Input.NewPassword" Label="Mật khẩu mới:" Variant="Variant.Outlined" AdornmentIcon="@PasswordInputIcon" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="Fix" AdornmentAriaLabel="Hiện mật khẩu" name="Input.NewPassword" /> <ValidationMessage For="@(() => Input.NewPassword)" /> </div> <div class="form-group"> <MudTextField Class="mt-3" @bind-Value="@Input.ConfirmPassword" Label="Nhập mật khẩu mới:" Variant="Variant.Outlined" AdornmentIcon="@PasswordInputIcon" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="Fix" AdornmentAriaLabel="Hiện mật khẩu" name="Input.ConfirmPassword" /> <ValidationMessage For="@(() => Input.ConfirmPassword)" /> </div> <div class="mt-3"> <button type="submit" class="btn btn-primary">Đổi mật khẩu</button> </div> </EditForm>

@code {
    [SupplyParameterFromForm]
    private ChangePasswordViewModel Input { get; set; } = new();
    public bool hasOldPassword { get; set; }
    public string Username { get; set; }
    public string MessageSuccess { get; set; }
    public string MessageError { get; set; }
    private bool showSuccess = false;
    private bool showError = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string userId;

    private void CloseMe()
    {
        showError = false;
        showSuccess = false;
    }

    void Fix()
    {
        if (PasswordInput == InputType.Text)
        {
            PasswordInput = InputType.Password;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        }else
        {
            PasswordInput = InputType.Text;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                await InitializeUserDataAsync(userId);
            }
        }
    }

    private async Task InitializeUserDataAsync(string userId)
    {
        var cacheKey = $"UserPasswordInfo_{userId}";
        if (!MemoryCache.TryGetValue(cacheKey, out UserPasswordInfo userInfo))
        {
            await using var context = await ContextFactory.CreateDbContextAsync();
            var identityUser = await UserManager.FindByIdAsync(userId);
            if (identityUser != null)
            {
                userInfo = new UserPasswordInfo
                    {
                        HasPassword = !string.IsNullOrEmpty(identityUser.PasswordHash),
                        UserId = identityUser.Id
                    };
                var cacheEntryOptions = new MemoryCacheEntryOptions()
                    .SetSlidingExpiration(TimeSpan.FromMinutes(30));
                MemoryCache.Set(cacheKey, userInfo, cacheEntryOptions);
            }
        }

        if (userInfo != null)
        {
            hasOldPassword = userInfo.HasPassword;
            Input.Id = userInfo.UserId;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(userId))
        {
            MessageError = "Không thể xác định người dùng. Vui lòng đăng nhập lại.";
            showError = true;
            return;
        }

        var user = await UserManager.FindByIdAsync(userId);
        if (user == null)
        {
            MessageError = "Không tìm thấy thông tin người dùng.";
            showError = true;
            return;
        }

        if (hasOldPassword && !await UserManager.CheckPasswordAsync(user, Input.OldPassword))
        {
            MessageError = "Mật khẩu cũ không đúng";
            showError = true;
            return;
        }

        if (Input.NewPassword != Input.ConfirmPassword)
        {
            MessageError = "Mật khẩu xác nhận không đúng";
            showError = true;
            return;
        }

        IdentityResult result;
        if (hasOldPassword)
        {
            result = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        }
        else
        {
            var token = await UserManager.GeneratePasswordResetTokenAsync(user);
            result = await UserManager.ResetPasswordAsync(user, token, Input.NewPassword);
        }

        if (result.Succeeded)
        {
            MessageSuccess = "Đổi mật khẩu thành công";
            showSuccess = true;
            showError = false;

            // Cập nhật cache
            var cacheKey = $"UserPasswordInfo_{userId}";
            var userInfo = new UserPasswordInfo
                {
                    HasPassword = true,
                    UserId = user.Id
                };
            var cacheEntryOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(30));
            MemoryCache.Set(cacheKey, userInfo, cacheEntryOptions);
            hasOldPassword = true;
            Input.NewPassword = "";
            Input.OldPassword = "";
            StateHasChanged();
        }
        else
        {
            MessageError = string.Join(", ", result.Errors.Select(e => e.Description));
            showError = true;
            showSuccess = false;
        }
    }

    private class UserPasswordInfo
    {
        public bool HasPassword { get; set; }
        public Guid UserId { get; set; }
    }
}
