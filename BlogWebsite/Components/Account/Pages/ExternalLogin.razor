@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using BlogWebsite.Components.Account
@using Client.Components.Layout
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlogWebsite.Data

@layout EmptyLayout
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject IHttpClientFactory ClientFactory
@inject IWebHostEnvironment _environment
<PageTitle>Đăng ký tài khoản</PageTitle>

<MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
    <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
        <MudCard Class="pa-4" Style="width:500px;">
            <MudText>Hãy điền tên đăng nhập của bạn</MudText>
            <InputText @bind-Value="Input.Email" class="form-control" style="display:none;" />
            <MudTextField Class="mt-3" @bind-Value="Input.UserName" Label="Tên đăng nhập" Variant="MudBlazor.Variant.Outlined" InputType="@InputType.Text" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Person" AdornmentAriaLabel="Tên đăng nhập" name="Input.UserName" />
            @if (message != null)
            {
                <div style="text-align:left" class="alert alert-danger my-3">
                    <p class=" px-2" style="color:red;">@message</p>
                </div>
            }
            <div class="d-flex mt-3">
                <MudButton Color="Color.Error" Variant="Variant.Filled">
                    <a class="py-2 px-4" style="color:black;" href="/Account/Register">Hủy</a>
                </MudButton>
                <button class="py-2 ms-3 px-4" style="background-color:lightgreen;font:bolder;border-radius:6px;" type="submit">ĐĂNG KÝ</button>
            </div>
        </MudCard>
    </EditForm>
</MudOverlay>

<script>
    const nameInput = document.querySelector('input[name="Input.FullName"]');
    const inputNameWrapper = nameInput.closest('div.mud-input');
    inputNameWrapper.addEventListener('input', () => {
        if (nameInput.value.trim() !== '') {
            inputNameWrapper.classList.add('mud-shrink');
        } else {
            inputNameWrapper.classList.remove('mud-shrink');
        }
    });
</script>

@code {
    public const string LoginCallbackAction = "LoginCallback";
    bool isVisible = true;

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
            return;
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
            return;
        }

        // Check if the email from external login is already registered
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                // Email exists, log in the user
                await SignInManager.SignInAsync(user, isPersistent: false);
                RedirectManager.RedirectTo(ReturnUrl);
                return;
            }
        }

        // If we reach here, we need to register the user
        isVisible = true;
    }

    private async Task<string> DownloadAndSaveImageAsync(string imageUrl, string userId)
    {
        try
        {
            using var httpClient = ClientFactory.CreateClient("MyHttpClient");
            string higherResUrl = imageUrl.Replace("s96-c", "s1000-c");
            var response = await httpClient.GetAsync(imageUrl);
            if (response.IsSuccessStatusCode)
            {
                var fileName = $"{userId}.png";
                var filePath = Path.Combine(_environment.WebRootPath, "images", fileName);

                Directory.CreateDirectory(Path.GetDirectoryName(filePath));

                using var stream = await response.Content.ReadAsStreamAsync();
                using var fileStream = new FileStream(filePath, FileMode.Create);
                await stream.CopyToAsync(fileStream);

                return $"/images/{fileName}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading image: {ex.Message}");
        }

        return "/Img/avatar_default.jpg";
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrEmpty(Input.UserName))
        {
            message = "Không thể bỏ trống tên đăng nhập";
            return;
        }

        var emailStore = GetEmailStore();
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == "image"))
        {
            var img = externalLoginInfo.Principal.FindFirstValue("image") ?? "/Img/avatar_default.jpg";
            if (!string.IsNullOrEmpty(img))
            {
                var imagePath = await DownloadAndSaveImageAsync(img, Guid.NewGuid().ToString());
                user.Img = imagePath;
            }
        }
        user.FullName = externalLoginInfo.Principal.Identity.Name;
        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
                }

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        public string UserName { get; set; } = "";
    }
}