@page "/ForgotPassword"


@using System.Text
@using System.ComponentModel.DataAnnotations
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlogWebsite.Data
@using System.Net.Mail
@using System.Net



@inject Blazored.SessionStorage.ISessionStorageService ProtectedSessionStore
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigate

<PageTitle>Forgot your password?</PageTitle>

<h1>Forgot your password?</h1>
<h2>Enter your email.</h2>
<hr />
<h1>cc</h1>



<div class="form-floating mb-3">
    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
    <label for="email" class="form-label">Email</label>
</div>
<button class="w-100 btn btn-lg btn-primary" @onclick="OnValidSubmitAsync">Reset password</button>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage </div>
}

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<MudButton>Hello</MudButton>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}



@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private string errorMessage;
    // private string Code = null;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    // 	if (Code != null)
    // 	{
    // 		Console.WriteLine(Code);
    // 		Console.WriteLine("Code");
    // 		await ProtectedSessionStore.SetAsync("ResetPasswordCode", Code);
    // 	}
    // }

    private async Task OnValidSubmitAsync()
    {
        errorMessage = string.Empty;
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            errorMessage = "Email bạn đã nhập sai hoặc không tồn tại";
            StateHasChanged();
            return;
        }

        var random = new Random();
        var code = random.Next(100000, 999999).ToString();
        await ProtectedSessionStore.SetItemAsync("ResetPasswordCode", code);
        try
        {
            var from = new MailAddress("kaioshin697@gmail.com");
            var to = new MailAddress(user.Email);
            const string subject = "Reset Password";
            const string frompass = "nugb fhpv aoho pjiw";
            string body = $"Please use the following code to reset your password:  {code}";

            using (var smtpClient = new SmtpClient
                {
                    Host = "smtp.gmail.com",
                    Port = 587,
                    EnableSsl = true,
                    DeliveryMethod = SmtpDeliveryMethod.Network,
                    Credentials = new NetworkCredential(from.Address, frompass)
                })
            using (var message = new MailMessage(from, to)
                {
                    Subject = subject,
                    Body = body,
                })
            {
                await smtpClient.SendMailAsync(message);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending email: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
            Console.WriteLine("a");
        }
        Navigate.NavigateTo("/ForgotPasswordConfirmation");

        // Không tiết lộ rằng người dùng không tồn tại hoặc chưa được xác nhận
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}

