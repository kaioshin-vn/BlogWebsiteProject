@page "/profile"
@using System.Security.Claims
@using Client.Components.ComponentCustom
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService Dialog
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

@if (Loaded)
{
    <div class="mt-4 mb-5">
        <MudCard>
            <MudCardMedia Image="/Img/univer.png" Height="300" />
        </MudCard>
        <div class="d-flex justify-space-between align-center" style="margin-top: -26px;">
            <div class="d-flex align-center">
                <MudAvatar Style="width: 160px; height: 160px; border: 4px solid white;" Class="mb-3 mb-md-0">
                    <MudImage @onclick="OpenAvatarViewer" Src="@(_avatarUrl ?? "/Img/avatar_default.jpg")" Style="cursor: pointer;" />
                </MudAvatar>
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadAvatar" Accept="image/*">
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.PhotoCamera"
                                       Class="position-absolute mud-elevation-3"
                                       Style="bottom: -70px; right: -5px; background-color: darkgrey; border-radius: 50%; padding: 8px;color:azure">
                        </MudIconButton>
                    </ActivatorContent>
                </MudFileUpload>
                <div class="ms-2 text-start">
                    <MudText Typo="Typo.h4">@model.FullName</MudText>
                    <MudText Typo="Typo.body1" Class="mb-2">Người theo dõi: @model.CountFollow.ToString("N0", System.Globalization.CultureInfo.InvariantCulture)</MudText>
                </div>
            </div>
            <div>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => _editMode = true)" />
            </div>
        </div>
        <div style="width:600px; margin:32px auto;">
            @if (_editMode)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Chỉnh sửa thông tin</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm Model="@model" @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
                            <MudTextField T="string" Label="Họ và tên" @bind-Value="model.FullName" For="@(() => model.FullName)" />
                            <MudTextField T="string" Label="Địa chỉ" @bind-Value="model.Address" For="@(() => model.Address)" />
                            <MudTextField T="string" Label="Số điện thoại" @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" />
                            <MudTextField T="string" InputType="InputType.Email" Label="Email" @bind-Value="model.Email" For="@(() => model.Email)" />
                            <MudTextField T="string" Label="Giới thiệu" @bind-Value="model.Descript" For="@(() => model.Descript)" Lines="3" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Class="mx-3" Color="Color.Primary" OnClick="@SaveChanges">Lưu thay đổi</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => _editMode = false)">Hủy</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </div>
        <div class="mt-4 d-flex align-items-start" style="width: calc(100% - 160px);">
            <div class="sticky" style=" position: sticky;top: 90px;" id="replaceHidden">
                <MudCard>
                    @if (!string.IsNullOrEmpty(model.Descript))
                    {
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Giới thiệu</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">@model.Descript</MudText>
                        </MudCardContent>
                    }
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Thông tin cá nhân</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="string">
                            @if (!string.IsNullOrEmpty(model.Address))
                            {
                                <MudListItem Icon="@Icons.Material.Filled.LocationOn" Text="@($"Địa chỉ: {model.Address}")" />
                            }
                            @if (!string.IsNullOrEmpty(model.PhoneNumber))
                            {
                                <MudListItem Icon="@Icons.Material.Filled.Phone" Text="@($"Điện thoại: {model.PhoneNumber}")" />
                            }
                            @if (!string.IsNullOrEmpty(model.Email))
                            {
                                <MudListItem Icon="@Icons.Material.Filled.Email" Text="@($"Email: {model.Email}")" />
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </div>
            <div class="" style="margin-top:-52px;">
                @if (listIntroPost.Count != 0)
                {
                    <div>
                        <div class="ms-4" style="width:100%; display: @(PostDetail == null?"block":"none");">
                            @foreach (var item in listIntroPost)
                            {
                                <PostIntro Avatar="@item.Avatar" Content="@item.Content"
                                           CreateDate="@item.CreateDate" IdPost="@item.Id"
                                           CommentCount="@item.CommentCount" Like="@item.Like"
                                           VideoFile="@item.VideoFile" ImgFile="@item.ImgFile"
                                           UserName="@item.UserName" TagNames="@item.ListTag" IdUserPost="@item.IdUser"
                                           Title="@item.Title" WatchDetailPost="DetailPost">
                                </PostIntro>
                            }
                        </div>
                    </div>

                    @if (PostDetail != null)
                    {
                        <div>
                            <div class="mt-3 ms-4" style="width:70%;">
                                <PostDetail Avatar="@PostDetail.Avatar" Content="@PostDetail.Content"
                                            CreateDate="@PostDetail.CreateDate" IdPost="@PostDetail.Id"
                                            CommentCount="@PostDetail.CommentCount" Like="@PostDetail.Like"
                                            VideoFile="@PostDetail.VideoFile" IdUserPost="@PostDetail.IdUser"
                                            UserName="@PostDetail.UserName" TagNames="@PostDetail.ListTag"
                                            Title="@PostDetail.Title" GoBack="GoBack">
                                </PostDetail>
                            </div>
                        </div>
                    }
                    <script>
                        function removeHiddenOverflow() {
                            const element = document.querySelector('#replaceHidden');

                            let currentElement = element.parentElement;

                            // Lặp qua tất cả các thẻ cha của thẻ được chọn
                            while (currentElement) {
                                const overflowStyle = window.getComputedStyle(currentElement).overflow;


                                // Kiểm tra nếu overflow là hidden
                                console.log(overflowStyle)
                                if (overflowStyle === 'hidden' || overflowStyle === 'auto' || overflowStyle === 'scroll' || overflowStyle === 'hidden auto') {
                                    currentElement.style.overflow = 'visible'; // Hoặc một giá trị phù hợp khác
                                }

                                // Chuyển sang thẻ cha tiếp theo
                                currentElement = currentElement.parentElement;
                            }
                        }
                        removeHiddenOverflow();
                    </script>
                }
            </div>
        </div>
    </div>
}
else
{
    <Client.Components.ComponentCustom.LoadingLocal></Client.Components.ComponentCustom.LoadingLocal>
}

@code {
    public string Id { get; set; }
    private bool _editMode = false;
    private bool success;
    private string[] errors = { };
    private MudForm form;
    private string _avatarUrl;
    private bool IsCurrentUser = false;
    private PersonalInfoModel model = new PersonalInfoModel();
    private bool isAvatarViewerVisible = false;
    PostIntroDTO? PostDetail = null;
    bool Loaded;

    List<PostIntroDTO> listIntroPost = new List<PostIntroDTO>();

    private DialogOptions dialogOptions = new DialogOptions()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            CloseOnEscapeKey = true,
            NoHeader = false
        };

    protected override async Task OnInitializedAsync()
    {
        var _httpClient = ClientFactory.CreateClient("MyHttpClient");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var idUserCurrent = UserManager.GetUserId(user);
        var idUser = Guid.Parse(idUserCurrent);

        var result = await _httpClient.GetStringAsync($"/GetListPostUser/{idUser}");

        var resultConverted = JsonConvert.DeserializeObject<List<PostIntroDTO>>(result);
        if (resultConverted != null)
        {
            listIntroPost = resultConverted;
        }
        await LoadUserData();
        Loaded = true;
    }

    private async Task LoadUserData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await GetInfo(currentUserId);
        Id = currentUserId;
    }

    private async Task GetInfo(string id)
    {
        var client = ClientFactory.CreateClient("MyHttpClient");
        var response = await client.GetAsync($"api/users/{id}");
        if (response.IsSuccessStatusCode)
        {
            model = await response.Content.ReadFromJsonAsync<PersonalInfoModel>();
            _avatarUrl = model.Img;
            model.ImgCover = "";
            model.IdViewer = "";
        }
        else
        {
            Snackbar.Add("Không thể tải thông tin người dùng.", Severity.Error);
        }
    }

    private async Task SaveChanges()
    {
        await form.Validate();

        if (success)
        {
            var client = ClientFactory.CreateClient("MyHttpClient");
            var response = await client.PutAsJsonAsync($"api/users/{Id}", model);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Thông tin đã được cập nhật thành công!", Severity.Success);
                _editMode = false;
            }
            else
            {
                Snackbar.Add("Không thể cập nhật thông tin. Vui lòng thử lại.", Severity.Error);
            }
        }
    }

    private async Task UploadAvatar(IBrowserFile file)
    {
        var client = ClientFactory.CreateClient("MyHttpClient");
        if (file != null && file.Size > 0)
        {
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            if (!allowedExtensions.Contains(fileExtension))
            {
                Snackbar.Add("Định dạng file không hợp lệ!", Severity.Error);
                return;
            }
            var fileName = Path.GetFileName(file.Name);
            var newFileName = Guid.NewGuid() + fileName;
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot\images", newFileName);
            var directoryPath = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }
            var url = $"/images/{newFileName}";
            model.Img = url;
        }
        var response = await client.PutAsJsonAsync($"api/users/{Id}", model);
        if (response.IsSuccessStatusCode)
        {
            _avatarUrl = model.Img;
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            Snackbar.Add("Ảnh đại diện đã được cập nhật thành công!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Không thể cập nhật ảnh đại diện. Vui lòng thử lại.", Severity.Error);
        }
    }

    private Task OpenAvatarViewer()
    {
        var parameters = new DialogParameters<AvatarViewerModal>
        {
            { x => x.ImageUrl, _avatarUrl ?? "/Img/avatar_default.jpg" },
        };
        return Dialog.ShowAsync<AvatarViewerModal>("Ảnh đại diện", parameters, dialogOptions);
    }

    async Task DetailPost(Guid idPost)
    {
        PostDetail = listIntroPost.FirstOrDefault(a => a.Id == idPost);
        StateHasChanged();
    }
    async Task GoBack()
    {
        PostDetail = null;
    }

    public class PersonalInfoModel
    {
        public string? Descript { get; set; }
        public string? Img { get; set; }
        public string? FullName { get; set; }
        public string? ImgCover { get; set; }
        public string? Address { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }
        public string Id { get; set; }
        public string IdViewer { get; set; }
        public int CountFollow { get; set; }
        public bool IsFollowing { get; set; }
    }
}