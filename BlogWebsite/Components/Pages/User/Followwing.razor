@page "/followwing"
@using System.Security.Claims
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-16">
    <MudText Typo="Typo.h4" Class="mb-4">Danh sách theo dõi</MudText>
    <MudTextField T="string" @bind-Value="SearchTerm" Label="Tìm kiếm" Variant="Variant.Outlined"
                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                  OnDebounceIntervalElapsed="@CallAPI" DebounceInterval="500" Class="mb-4" Clearable OnInternalInputChanged="@CallAPI" />
    @if (!_loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (users.Count == 0)
    {
        <MudAlert Severity="Severity.Info">Không có người theo dõi nào.</MudAlert>
    }
    else
    {

        <MudList T="string" Clickable="true">
            @foreach (var follower in users)
            {
                <MudListItem>
                    <div class="d-flex align-center">
                        <a href="/other-profile/@follower.Id" style="cursor:pointer">
                            <MudAvatar Class="mr-4">
                                <MudImage Src="@follower.Img" Alt="AVT!"></MudImage>
                            </MudAvatar>
                            <MudText Typo="Typo.body1">@follower.FullName</MudText>
                        </a>
                        <MudSpacer/> 
                        @if (follower.IsFollowing)
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() =>  ToggleFollowUser(follower.Id, follower.IsFollowing))">
                                Bỏ theo dõi
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() =>  ToggleFollowUser(follower.Id, follower.IsFollowing))">
                                Theo dõi
                            </MudButton>
                        }

                    </div>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    }
</MudContainer>
@code {
    [Parameter]
    public int? Page { get; set; }
    private List<UserDto> users = new List<UserDto>();
    private bool _loading = false;
    private int _totalPages;
    private const int PageSize = 20;
    private string SearchTerm { get; set; } = "";

    private Guid IdUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CallAPI();
        _loading = true;
    }

    private async Task CallAPI()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var idUserCurrent = UserManager.GetUserId(user);
            var idUser = Guid.Parse(idUserCurrent);

            var client = ClientFactory.CreateClient("MyHttpClient");
            var page = Page ?? 1;
            var response = await client.GetStringAsync($"/GetAllUserFlow/{idUser}/{SearchTerm}");

            users = JsonConvert.DeserializeObject<List<UserDto>>(response);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Có lỗi xảy ra khi tải danh sách người theo dõi.", Severity.Error);
        }
    }
    private async Task ToggleFollowUser(Guid Id, bool isFollowing)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var client = ClientFactory.CreateClient("MyHttpClient");
        var currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var response = await client.PostAsync($"api/users/{Id}/{currentUserId}/{isFollowing}/toggle-follow", null);
        if (response.IsSuccessStatusCode)
        {
            if (!isFollowing)
            {
                Snackbar.Add("Theo dõi thành công.", Severity.Info);
            }
            else
            {
                Snackbar.Add("Bỏ theo dõi thành công.", Severity.Info);
            }
            var fl = users.First(c => c.Id == Id);
            fl.IsFollowing = !isFollowing;
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("Không thể thực hiện hành động này.", Severity.Warning);
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add("Không tìm thấy người dùng.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Có lỗi xảy ra. Vui lòng thử lại.", Severity.Error);
        }
    }

    private async Task PageChanged(int page)
    {
        Page = page;
        await CallAPI();
    }
    public class FollowerDto
    {
        public List<UserDto> Followers { get; set; }
        public int TotalCount { get; set; }
    }
    public class UserDto
    {
        public string FullName { get; set; }
        public string Img { get; set; }
        public Guid Id { get; set; }
        public bool IsFollowing { get; set; }
    }
}