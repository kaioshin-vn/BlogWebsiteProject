@page "/HidePost"

@using Client.Components.Admin
@using Data.DTO.EntitiDTO
@using Data.DTO
@using Data.Database.Table
@using Newtonsoft.Json

@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<style>
    .result-container {
        margin-top: 20px;
    }

    .custom-tabs .mud-tab {
        text-transform: none;
    }

    .truncate-text {
        white-space: nowrap; /* Không cho nội dung xuống dòng */
        overflow: hidden; /* Ẩn phần nội dung bị tràn */
        text-overflow: ellipsis; /* Hiển thị dấu '...' khi nội dung bị tràn */
    }

    .hover-underline:hover {
        text-decoration: underline;
    }

</style>

@if (!isLoaded)
{
    <Client.Components.ComponentCustom.LoadingLocal></Client.Components.ComponentCustom.LoadingLocal>
}
else
{
    <div class="result-container">
        <div class="mt-3">
            @if (listReport.Count != 0)
            {
                <MudList T="string">
                    @foreach (var post in listReport)
                    {
                        <MudListItem Style="width:900px; border-radius:20px">
                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem xs="9">
                                    <MudCardHeader Class="p-0 m-0">
                                        <MudAvatar Size="Size.Medium">
                                            <MudImage ObjectFit="ObjectFit.Cover" Src="@post.Post.User.Img"></MudImage>
                                        </MudAvatar>
                                        <MudItem Class="px-2">
                                            <MudText Typo="Typo.body1"><b class="hover-underline">@post.Post.User.FullName</b></MudText>
                                            <MudText Typo="Typo.body2"><span>@post.Post.CreateDate</span></MudText>
                                        </MudItem>
                                    </MudCardHeader>
                                    <MudCardContent Class="p-0 pt-1 m-0">
                                        <MudText Typo="Typo.body1" Class="truncate-text" Style="font-size: 20px;"><b class="hover-underline">@post.Post.Title</b></MudText>
                                    </MudCardContent>
                                    <MudItem>
                                        @if (!string.IsNullOrEmpty(post.Post.Like))
                                        {
                                            string[] likeCount = post.Post.Like.Split('|');
                                            int toltalLike = likeCount.Distinct().Count();
                                            <MudText Style=" font-size:12px; color:gray">@(string.IsNullOrEmpty(Convert.ToString(toltalLike)) ? 0 : toltalLike) lượt thích · </MudText>
                                        }
                                    </MudItem>
                                </MudItem>
                                <MudItem xs="3" Class="d-flex justify-content-end">
                                    @if (!string.IsNullOrEmpty(post.Post.ImgFile) || !string.IsNullOrEmpty(post.Post.VideoFile))
                                    {
                                        <MudImage Style="border-radius:20px" Src="@(string.IsNullOrEmpty(post.Post.ImgFile) ? post.Post.VideoFile : post.Post.ImgFile)" ObjectFit="ObjectFit.Cover" Width="150" Height="100"></MudImage>
                                    }
                                    else
                                    {
                                        <MudText Style="width:150px; height:100px"></MudText>
                                    }
                                </MudItem>
                                <MudText Class="ms-5">Từ khóa vi phạm : @post.ListRestrictedWord</MudText>
                                <MudButton OnClick="() => NaviGate(post.IdPost.ToString())" Variant="Variant.Text" Class="mt-2" Color="Color.Success">Sửa bài viết</MudButton>
                            </MudGrid>
                        </MudListItem>
                        <hr style="width:900px" />
                    }
                </MudList>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Class="mt-2">Chưa có bài viết bị ẩn nào nào</MudAlert>
            }
        </div>
    </div>
}

@code {

    List<PostHideByRestrictedDTO> listReport = new List<PostHideByRestrictedDTO>();

    TagDTO Tag = new TagDTO();

    private string Search = "";
    private SearchResultWithPaginationDTO searchResult;

    int TotalPage;

    int Page = 1;

    bool isLoaded;

    protected override async Task OnInitializedAsync()
    {
        await LoadReport();
    }

    async Task LoadReport ()
    {
        isLoaded = false;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userCurrent = UserManager.GetUserId(user);
        var currentUserId = Guid.Parse(userCurrent);

        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await httpClient.GetStringAsync($"/getListHidePost/{currentUserId}");

        listReport = JsonConvert.DeserializeObject<List<PostHideByRestrictedDTO>>(response);

        isLoaded = true;
    }

    void NaviGate(string link)
    {
        NavigationManager.NavigateTo("/updatePost/" + link, true);
    }
}
