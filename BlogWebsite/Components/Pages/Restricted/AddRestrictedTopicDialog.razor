@using Data.Database.Table
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using static Client.Components.Pages.Restricted.RestricedWord
@inject IHttpClientFactory _httpClientFactory;
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
<MudDialog Style="width:500px;">
    <DialogContent>
        <MudTextField @bind-Value="topic.Word" Label="Từ khóa hạn chế" Required="true" RequiredError="Không được bỏ trống!" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@(Topic == null ? "Thêm" : "Cập nhật")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public RestrictedWordDto Topic { get; set; }

    private RestrictedWordDto topic = new RestrictedWordDto();

    protected override void OnInitialized()
    {
        if (Topic != null)
        {
            topic = new RestrictedWordDto { Id = Topic.Id, Word = Topic.Word };
        }
    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(topic.Word))
        {
            Snackbar.Add("Không được bỏ trống", Severity.Error);
            return;
        }

        try
        {
            var client = _httpClientFactory.CreateClient("MyHttpClient");
            var data = await client.GetStringAsync($"/checkExistedRestriceted/{topic.Word}");
            if (data == "true")
            {
                Snackbar.Add($"Từ khóa này đã tồn tại", Severity.Error);
                return;
            }


            HttpResponseMessage response;
            if (Topic == null)
            {
                response = await client.PostAsJsonAsync("api/restrictedword", topic);
            }
            else
            {
                response = await client.PutAsJsonAsync($"api/restrictedword/{topic.Id}", topic);
            }

            if (response.IsSuccessStatusCode)
            {
                var listIdString = await response.Content.ReadAsStringAsync();

                var listIdUser = JsonConvert.DeserializeObject<List<Guid>>(listIdString);

                if (listIdUser.Count != 0)
                {
                    var hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubNotice"))
            .Build();

                    await hubConnection.StartAsync();
                    foreach (var item in listIdUser)
                    {
                        var notice = new Notice();
                        notice.Id = Guid.NewGuid();
                        notice.FromUser = item;
                        notice.ToUser = item;
                        notice.Content = "Bài viết của bạn đã bị ẩn do nội dung chứa từ khóa bị hạn chế";
                        notice.CreateDate = DateTime.Now;
                        notice.Link = $"/HidePost";
                        await client.PostAsJsonAsync($"/addNewNotice", notice);

                        await hubConnection.SendAsync("SendPrivateMessage", item.ToString());
                    }
                }

                Snackbar.Add(Topic == null ? "Đã thêm từ hạn chế thành công" : "Đã cập nhật từ hạn chế thành công", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Không thể lưu từ hạn chế: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}