@page "/savepost"
@using Client.Components.ComponentCustom
@using Client.Components.Layout

@inject IHttpClientFactory HttpClientFactory 
@inject IDialogService DialogService
@layout SaveLayout
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

@if (lstPostSave == null || lstPost == null)
{
    <MudText>loadding...</MudText>
}       
else
{
    <MudDrawerContainer Class="mud-height-full">
        <MudDrawer Open="true" Width="300px" Fixed="true" Elevation="1" Class="pt-4">
            <MudGrid Class="px-2" Justify="Justify.SpaceBetween">
                <MudItem>
                    <MudText Typo="Typo.h5">Đã lưu</MudText>
                </MudItem>
                <MudItem> 
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" aria-label="github" />
                </MudItem>
            </MudGrid>
            <MudItem>
                <MudButton Class="w-100 justify-content-start">
                    <MudAvatar>
                        <MudImage Src="FixedImage/Screenshot2.png" Class="rounded-2" />
                    </MudAvatar>
                    <MudText Class="px-2" Typo="Typo.h6">Mục đã lưu</MudText>
                </MudButton>
                <MudDivider />
            </MudItem>
            <MudText Class="p-2">Bộ sưu tập của tôi</MudText>
            <MudList T="string">
                @foreach (var item in lstPostSave)
                {
                    <MudListItem OnClick="() => GetPostInSave(item.Id)">
                        <AvatarContent>
                               @*  @if (!string.IsNullOrWhiteSpace(item.SaveName))
                                    {
                                    <MudImage Src="" ObjectFit="ObjectFit.Cover" Height="40" Width="40" Class="rounded-2" />
                                } *@
                                <MudAvatar Color="Color.Primary" Class="rounded-2">
                                    @item.SaveName[0]
                                </MudAvatar>
                        </AvatarContent>
                        <ChildContent>
                            @item.SaveName
                        </ChildContent>
                    </MudListItem>
                }
            </MudList>
            <MudItem Class="p-2">
                <MudButton OnClick="OpenDialog" Variant="Variant.Outlined" Color="Color.Info" Class="w-100 rounded-3">
                    <MudIcon Icon="@Icons.Material.Filled.Add" />
                    <MudText>Tạo bộ sưu tập mới</MudText>
                </MudButton>
            </MudItem>
        </MudDrawer>
        <MudMainContent Class="p-4 d-flex">
            <MudGrid>
                <MudItem xs="12">
                    <MudGrid Class="p-2" Justify="Justify.SpaceBetween">
                        <MudItem>
                            <MudIcon Icon="@Icons.Material.Filled.LockPerson"/> Chỉ mình tôi
                        </MudItem>
                        <MudItem>
                            <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Color="Color.Default"
                                     AriaLabel="Open user menu">
                                <MudMenuItem OnClick="DeletePostSave">Delete</MudMenuItem>
                            </MudMenu>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                @foreach (var item in lstPost)  
                {
                    <MudItem xs="12">
                        <MudCard Style="border-radius:10px" Class="mt-2">
                            <MudGrid Class="p-3" Style="">
                                <MudItem xs="2">
                                    <MudImage Style="border-radius:10px;" ObjectFit="ObjectFit.Cover" Src="@(string.IsNullOrEmpty(item.ImgFile) ? "0cdea890-2ed5-4b5e-9192-c7d5de3dc9cb.jpg" : item.ImgFile)" Height="150" Width="150" />
                                </MudItem>
                                <MudItem xs="10">
                                    <MudGrid Class="d-flex align-content-between flex-wrap flex-grow-1 gap-4 ">
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.h5">@item.Title</MudText>
                                            <MudText Typo="Typo.body2">Bài viết - đã lưu từ</MudText>
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudButton Variant="Variant.Filled" OnClick="async () => await OpenAddPostSaveDialog(item.Id)">Thêm vào bộ sưu tập</MudButton>
                                            <MudIconButton Class="mx-2" Icon="@Icons.Material.Filled.Share" Variant="Variant.Filled" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" OnClick="async () => await DeletePostInSave(item.Id)" />
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                            </MudGrid>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudMainContent>
    </MudDrawerContainer>
}
   
@code {
    List<SaveDTO> lstPostSave = new List<SaveDTO>();
    List<PostDTO> lstPost = new List<PostDTO>();

    private Guid idSave { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var idUserCurrent = UserManager.GetUserId(user);
        var idUser = Guid.Parse(idUserCurrent);
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        lstPostSave = await httpClient.GetFromJsonAsync<List<SaveDTO>>($"/api/save/get_savepost/{idUser}");
    }

    private async Task GetPostInSave(Guid id)
    {
        idSave = id;
        await LoadPostsInCurrentSave();
    }

    private async Task LoadPostsInCurrentSave()
    {
        if (idSave != Guid.Empty)
        {
            var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
            lstPost = await httpClient.GetFromJsonAsync<List<PostDTO>>($"/api/postsave/getPostInSave/{idSave}");
            StateHasChanged();
        }
    }

    private async Task OpenAddPostSaveDialog(Guid id)
    {
        var parameters = new DialogParameters()
        {
            {"idPost", id}
        };
        var dialog = DialogService.Show<AddPostSaveDialog>(string.Empty, parameters);
        var result = await dialog.Result;
    }

    private async Task DeletePostSave()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userCurrent = await UserManager.GetUserAsync(user);
        var userId = userCurrent.Id;

        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await httpClient.DeleteAsync($"/api/PostSave/deleteSaveColection/{idSave}");
        if (result.IsSuccessStatusCode)
        {
            lstPostSave = await httpClient.GetFromJsonAsync<List<SaveDTO>>($"/api/save/get_savepost/{userId}");
            Snackbar.Add("Xoá bộ sưu tập thành công!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Xoá bộ sưu tập không thành công!", Severity.Error);
        }
    }

    private async Task DeletePostInSave(Guid idPost)
    {
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await httpClient.DeleteAsync($"/api/PostSave/deletePostInSave/{idSave}/{idPost}");
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Xoá bài viết trong bộ sưu tập thành công!", Severity.Success);
            await LoadPostsInCurrentSave();
        }
        else
        {
            Snackbar.Add("Hãy chọn bộ sưu tập để xoá!", Severity.Warning);
        }
    }

    private async Task<PostDTO> GetFirstPostInSave(Guid saveId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
            var posts = await httpClient.GetFromJsonAsync<List<PostDTO>>($"/api/postsave/getFirstImageSave/{saveId}");
            return posts?.FirstOrDefault();
        }
        catch
        {
            return null;
        }
    }

    private async Task OpenDialog()
    {
        var dialog = DialogService.Show<CreateSaveDialog>();
        var result = await dialog.Result;
    }
}
