@page "/updateQuestion/{Id:guid}"


@inject IJSRuntime JSRunTime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

@if (EditQuestion == null)
{
    <MudText>Loading...</MudText>
}
<MudContainer MaxWidth="MaxWidth.Large" Class="my-container">
    <MudGrid>
        <MudItem xs="8">
            <MudCard Class="p-4">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudItem>
                        <MudText Typo="Typo.h6">Edit Question</MudText>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="Variant.Text">Drafts</MudButton>
                    </MudItem>
                </MudGrid>
                <MudDivider />
                <MudCardActions Class="my-4">
                    <MudButton Variant="Variant.Text" Color="Color.Dark">Text</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Dark">Images & Video</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Dark">Link</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Dark" Disabled="true">Poll</MudButton>
                </MudCardActions>
                <MudForm @ref="form">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField Style="border-radius:20px" @bind-Value="EditQuestion.IdUser" Label="Id User" Variant="Variant.Outlined" Disabled></MudTextField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Style="border-radius:20px" @bind-Value="EditQuestion.Title" Label="Tiêu đề" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Style="border-radius:20px" @bind-Value="EditQuestion.Description" Label="Mô tả" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-start ">
                            <MudItem>
                                <MudFileUpload T="IBrowserFile" @bind-File="EditQuestion.ImgFile" OnFilesChanged="UploadFile">
                                    <ActivatorContent>
                                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Image" />
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudItem>
                            <MudItem>
                                @if (!string.IsNullOrEmpty(fileName))
                                {
                                    <MudText Class="pt-3">Tên ảnh đã chọn: @fileName</MudText>
                                }
                            </MudItem>

                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="p-2" Justify="Justify.FlexStart">
                        <MudItem>
                            <MudButton Variant="Variant.Text" Class="p-2">Add tags</MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="12">
                            <textarea @bind="EditQuestion.Content" id="summerNote"></textarea>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Justify="Justify.FlexEnd">
                        <MudItem>
                            <MudButton Class="mt-3" OnClick="( ()=> ComeBack())" Variant="Variant.Filled" Color="Color.Default">Come Back</MudButton>
                            <MudButton Class="mt-3" OnClick="(async ()=> await UpdatePostSubmit())" Variant="Variant.Filled" Color="Color.Warning">Update Post</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudCard>
                <MudCardContent>
                    <MudText>Đây là nội dung của thẻ 2.</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<script>
    $(document).ready(function () {
        console.log("jQuery is loaded!");
        $('#summerNote').summernote({
            height: 120,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture', 'video']],
                ['height', ['height']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ]
        });
    });
    function setSummernoteContent(content) {
        $('#summerNote').summernote('code', content);
    }
    function getSummernoteContent() {
        return $('#summerNote').summernote('code');
    }
</script>


@code{
    [Parameter]
    public Guid Id { get; set; }

    private MudForm form;


    private string fileName { get; set; }

    PostDTO EditQuestion = new PostDTO();

    protected override async Task OnInitializedAsync()
    {
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        EditQuestion = await httpClient.GetFromJsonAsync<PostDTO>($"/api/post/getById/{Id}");
        // Gán nội dung cho summernote
        if (!string.IsNullOrEmpty(EditQuestion.Content))
        {
            await JSRunTime.InvokeVoidAsync("setSummernoteContent", EditQuestion.Content);
        }

        if (!string.IsNullOrEmpty(EditQuestion.ImgFile))
        {
            fileName = EditQuestion.ImgFile.ToString();
        }
    }

    private void UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        fileName = file.Name;
        EditQuestion.ImgFile = Convert.ToString(file);
    }

    private void ComeBack()
    {
        Navigation.NavigateTo("/question");
    }

    private async Task UpdatePostSubmit()
    {
        // var content = new MultipartFormDataContent();
        // content.Add(new StringContent(EditQuestion.IdUser.ToString()), "idUser");
        // content.Add(new StringContent(EditQuestion.Title), "title");
        // content.Add(new StringContent(EditQuestion.Description), "description");
        // content.Add(new StringContent(EditQuestion.Content = await JSRunTime.InvokeAsync<string>("getSummernoteContent")), "content");
        // content.Add(new StringContent(EditQuestion.ImgFile), "imgfile");

        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await httpClient.PutAsJsonAsync($"/api/post/updatePost/{Id}", EditQuestion);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/question");
        }
        var errorMessage = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"error: {response}");
    }
}