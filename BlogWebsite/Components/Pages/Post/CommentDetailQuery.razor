@page "/commentDetail/{IdCmt:guid}"

@using ASM_PH35423.StaticClass
@using Client.Components.ComponentCustom
@using Data.DTO.EntitiDTO
@using System.Net.Http.Headers
@using HtmlAgilityPack
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization;

@inject IJSRuntime JSRunTime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    html {
        scroll-behavior: auto !important;
    }

    .content_by_user img {
        display: block; /* Chuyển ảnh thành khối để dễ căn giữa */
        margin: 0 auto; /* Căn giữa theo chiều ngang */
        height: 300px; /* Chiều cao của ảnh */
        border-radius: 8px; /* Bo góc */
    }

    .rz-html-editor:focus-within {
        outline: none !important;
    }

    .rz-html-editor-content img {
        display: block; /* Chuyển ảnh thành khối để dễ căn giữa */
        margin: 0 auto; /* Căn giữa theo chiều ngang */
        height: 300px; /* Chiều cao của ảnh */
        border-radius: 8px; /* Bo góc */
    }

    .hover-post:hover {
        background-color: rgb(249, 249, 249);
        cursor: pointer;
        transform: translateY(-4px);
    }

    .hover-post {
        transform: translateY(0);
        /* Thêm transition để tạo hiệu ứng mượt khi chuyển đổi */
        transition: transform 0.3s ease;
    }

    .hover {
        transform: translateY(0);
        /* Thêm transition để tạo hiệu ứng mượt khi chuyển đổi */
        transition: transform 0.3s ease;
    }

    .hover-underline:hover {
        text-decoration: underline;
        cursor: pointer;
    }

    .hover-border:hover {
        border: 2px solid transparent;
        cursor: pointer;
    }

    .hover-border {
        border: 2px solid lightgrey;
        transition: border 0.3s ease-in-out;
    }

    .hover-background:hover {
        cursor: pointer;
        background-color: rgb(245, 245, 245);
    }

    .hover-backgroundblue:hover {
        cursor: pointer;
        background-color: aliceblue;
    }
</style>

@if (!Loaded)
{
    <LoadingLocal></LoadingLocal>
}
else
{
    if (!isDeleted)
    {
        <a href="/postDetail/@this.IdPost">
            <MudButton Color="Color.Tertiary">Xem chi tiết bài viết</MudButton>
        </a>

        <div class="d-flex align-items-start  ms-3 my-4">
            <div>
                <a href="/other-profile/@IdUserComment">
                    <MudAvatar Style="height:32px;width:32px;" Class="hover-border">
                        <MudImage Height="25" Src="@this.Avatar"></MudImage>
                    </MudAvatar>
                </a>
            </div>


            <div class="flex-grow-1 ms-3">
                <div class="d-flex align-items-end">
                            <a href="/other-profile/@IdUserComment">
                        <MudText Typo="Typo.body1"><b class="hover-underline">@this.UserName</b></MudText>
                    </a>
                    <span style="color:darkgray;" class="hover-underline mx-3">@this.Date</span>
                </div>
                @if (!isUpdate)
                {
                    <div>
                        @if (Content != null && Content != "")
                        {
                            <MudCardContent Class="my-1 p-0">
                                <div class="content_by_user">
                                    @ContentHtml
                                </div>
                            </MudCardContent>
                        }
                    </div>
                    <div class="d-flex align-items-center mt-2 ms-3">
                        <div @onclick="LikeClick" class="hover">
                            <MudIconButton Style="padding:10px;" @onclick="LikeClick" Disabled="@(!isUserLike)" Icon="@Icons.Material.Filled.Favorite" Color="Color.Secondary" />
                        </div>
                        <MudText Class="">@LikeText</MudText>
                        <div class="p-2 hover-background d-flex align-items-end ms-4" style="border-radius:8px;" @onclick="ShowComment">
                            <MudIcon Class="p-0" Icon="@Icons.Material.Filled.Reply" Disabled="true" />
                            <span class=""> Phản hồi</span>
                        </div>
                    </div>
                    @if (isAddCmt)
                    {
                        <AddReplyComment HideComment="HideComment" UserAddComment="UserAddNewComment" IdUserComment="@IdUserComment" IdCmt="@IdCmt" UserName="@this.UserName"></AddReplyComment>
                    }

                    @if (ListReplyCommentUserNew.Count != 0)
                    {
                        foreach (var item in ListReplyCommentUserNew)
                        {
                            <div style="width:100%;">
                                <ReplyDetail Avatar="@item.Avatar" Content="@item.Content" IdReply="@item.Id"
                                             CreateDate="@item.CreateDate" IdPost="@item.Id" IdCmt="@this.IdCmt"
                                             Like="@item.Like" IdUserComment="@item.IdUser" IdMention="@item.Mention"
                                             UserName="@item.UserName" UserMentionName="@item.UserNameMention">
                                </ReplyDetail>
                            </div>
                        }
                    }

                    @if (isFirstLoadReply)
                    {
                        <div style="width:100%; display: @(isLoadReply?"block":"none");">
                            <ListReply IdCmt="@IdCmt"></ListReply>
                        </div>
                    }
                }
                else
                {
                    <div style="border:1px solid  rgb(206, 206, 206); border-radius:12px;" class="p-2 my-2">
                        <Radzen.Blazor.RadzenHtmlEditor @bind-Value="@ContentUpdate" Execute="@OnExecute" style="min-height:80px; height: auto;max-width:675px;border:none ;overflow:hidden;" UploadUrl="minimalApi/uploadImage">
                            <Radzen.Blazor.RadzenHtmlEditorUndo Title="Trước" />
                            <Radzen.Blazor.RadzenHtmlEditorRedo Title="Sau" />
                            <Radzen.Blazor.RadzenHtmlEditorSeparator />
                            <Radzen.Blazor.RadzenHtmlEditorBold Title="In đậm" />
                            <Radzen.Blazor.RadzenHtmlEditorItalic Title="In nghiêng" />
                            <Radzen.Blazor.RadzenHtmlEditorUnderline Title="Gạch chân" />
                            <Radzen.Blazor.RadzenHtmlEditorStrikeThrough Title="Xuyên qua" />
                            <Radzen.Blazor.RadzenHtmlEditorSeparator />
                            <Radzen.Blazor.RadzenHtmlEditorAlignLeft Title="Căn trái" />
                            <Radzen.Blazor.RadzenHtmlEditorAlignCenter Title="Căn giữa" />
                            <Radzen.Blazor.RadzenHtmlEditorAlignRight Title="Căn phải" />
                            @* <RadzenHtmlEditorJustify Title="Căn đều" /> *@
                            <Radzen.Blazor.RadzenHtmlEditorSeparator />
                            <Radzen.Blazor.RadzenHtmlEditorIndent Title="Thụt lề" />
                            <Radzen.Blazor.RadzenHtmlEditorOutdent Title="Nhô lề" />
                            @* <RadzenHtmlEditorUnorderedList Title="Danh sách" /> *@
                            <Radzen.Blazor.RadzenHtmlEditorOrderedList Title="Danh sách sắp xếp" />
                            <Radzen.Blazor.RadzenHtmlEditorSeparator />
                            @* <Radzen.Blazor.RadzenHtmlEditorColor Title="Màu chữ" />
                <Radzen.Blazor.RadzenHtmlEditorBackground Title="Màu nền" />
                <Radzen.Blazor.RadzenHtmlEditorRemoveFormat Title="Bỏ định dạng" />
                <Radzen.Blazor.RadzenHtmlEditorSeparator /> *@
                            @* <RadzenHtmlEditorSubscript Title="Chữ phía dưới" />
                <RadzenHtmlEditorSuperscript Title="Chữ phía trên" /> *@
                            @* <RadzenHtmlEditorSeparator /> *@
                            <Radzen.Blazor.RadzenHtmlEditorLink Title="Thêm link" CancelText="Hủy" LinkText="Hiển thị" OpenInNewWindowText="Mở trong cửa số mới" UrlText="Đường dẫn" />
                            <Radzen.Blazor.RadzenHtmlEditorUnlink Title="Bỏ đường dẫn" />
                            <Radzen.Blazor.RadzenHtmlEditorImage Title="Thêm ảnh" ShowHeight="false" ShowWidth="false" ShowAlt="false" UploadChooseText="Tải ảnh lên" AltText="Tên ảnh" CancelText="Hủy" SelectText="Chọn ảnh tải lên" UrlText="Nếu không có sẵn ảnh trên máy, hãy nhập đường dẫn ảnh trên web" HeightText="Chiều cao" WidthText="Chiều rộng" />
                            <Radzen.Blazor.RadzenHtmlEditorSeparator />
                            @* <Radzen.Blazor.RadzenHtmlEditorFontName Title="Phông chữ" Placeholder="Phông chữ" />
                <Radzen.Blazor.RadzenHtmlEditorFontSize Title="Kích thước" Placeholder="Cỡ chữ" /> *@
                            @* <RadzenHtmlEditorFormatBlock Title="Cỡ chữ" Placeholder="Cỡ chữ" NormalText="Thông thường" Heading1Text="Loại 1" Heading2Text="Loại 2" Heading3Text="Loại 3" Heading4Text="Loại 4" Heading5Text="Loại 5" Heading6Text="Loại 6" /> *@
                            @* <Radzen.Blazor.RadzenHtmlEditorSeparator /> *@
                            <Radzen.Blazor.RadzenHtmlEditorCustomTool CommandName="AddCode" Icon="code" Title="Code" />
                        </Radzen.Blazor.RadzenHtmlEditor>

                        <div class="d-flex justify-content-end mb-2">
                            <MudButton Variant="Variant.Filled" OnClick="HideUpdatetAction" Size="Size.Small" Class="mx-3">Hủy</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Small" OnClick="UpdateComment">Chỉnh sửa</MudButton>
                        </div>
                    </div>
                }
            </div>


            <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Style="align-self:unset;" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Color="Color.Default" AriaLabel="Open user menu">
                @if (IdUser == IdUserComment)
                {
                    <MudMenuItem @onclick="ShowUpdateComment">Chỉnh sửa</MudMenuItem>
                    <MudMenuItem OnClick="DeleteComment">Xóa bình luận</MudMenuItem>
                }
                @if (IdUser != Guid.Empty)
                {
                    <MudMenuItem>Báo cáo</MudMenuItem>
                }
            </MudMenu>
        </div>
    }
    else
    {
        <div class="my-5 mx-auto">
            <h3>Oops</h3>
            <p>Bình luận này đã bị xóa</p>
        </div>
    }
}

@code {
    [Parameter]
    public Guid IdCmt { get; set; }

    public Guid IdPost { get; set; }

    public Guid IdUserComment { get; set; }

    public string UserName { get; set; }

    public string Avatar { get; set; }

    public string? Content { get; set; }

    public string Like { get; set; }

    public DateTime? CreateDate { get; set; }

    bool isUpdate { get; set; }

    bool isLoadReply { get; set; }

    bool isAddCmt { get; set; }

    bool isUserLike;

    bool isFirstLoadReply;

    string ContentUpdate;

    bool isDeleted;

    bool Loaded { get; set; }
    string LikeText { get; set; }
    string Date { get; set; }
    private MarkupString ContentHtml { get; set; }
    private Guid IdUser { get; set; }

    List<ReplyDTO> ListReplyCommentUserNew = new List<ReplyDTO>();

    protected override async Task OnInitializedAsync()
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await _httpClient.GetStringAsync($"/commment/getCommentDetail/{IdCmt}");
        if (string.IsNullOrEmpty(result))
        {
            isDeleted = true;
            Loaded = true;
            return;
        }
        var commentDTO = JsonConvert.DeserializeObject<CommentDTO>(result);

        IdPost = commentDTO.IdPost;
        IdUserComment = commentDTO.IdUser;
        UserName = commentDTO.UserName;
        Avatar = commentDTO.Avatar;
        Content = commentDTO.Content;
        Like = commentDTO.Like;
        CreateDate = commentDTO.CreateDate;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userCurrent = UserManager.GetUserId(user);
        if (userCurrent != null)
        {
            IdUser = Guid.Parse(userCurrent);
        }

        var timeCacul = DateTime.Now - CreateDate.Value;

        int yearsDifference = DateTime.Now.Year - CreateDate.Value.Year;
        if (DateTime.Now < CreateDate.Value.AddYears(yearsDifference))
        {
            yearsDifference--;
        }

        int monthsDifference = (DateTime.Now.Year - CreateDate.Value.Year) * 12 + DateTime.Now.Month - CreateDate.Value.Month;
        if (DateTime.Now.Day < CreateDate.Value.Day)
        {
            monthsDifference--;
        }

        if (yearsDifference >= 1)
        {
            Date = $"{yearsDifference} năm";
        }
        else if (monthsDifference >= 1)
        {
            Date = $"{monthsDifference} tháng";
        }
        else if (timeCacul.TotalDays >= 1)
        {
            Date = $"{(int)timeCacul.TotalDays} ngày";
        }
        else if (timeCacul.TotalHours >= 1)
        {
            Date = $"{(int)timeCacul.TotalHours} giờ";
        }
        else if (timeCacul.TotalMinutes >= 1)
        {
            Date = $"{(int)timeCacul.TotalMinutes} phút";
        }
        else
        {
            Date = "Vừa xong";
        }

        LikeCount();


        if (Content != null)
        {
            ContentHtml = (MarkupString)Content;
        }

        ToggleSeeReply();

        Loaded = true;
    }

    async Task LikeClick()
    {
        if (IdUser == Guid.Empty)
        {
            var parameter = new DialogParameters<DialogLogin>();
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            await DialogService.Show<DialogLogin>("Yêu cầu đăng nhập", parameter, options).Result;
            return;
        }
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await httpClient.GetAsync($"/likeCmt/{IdCmt}/{IdUser}/{!isUserLike}");
        if (response.IsSuccessStatusCode)
        {
            isUserLike = !isUserLike;
            Like = await response.Content.ReadAsStringAsync();
            LikeCount();
            StateHasChanged();
        }
    }

    void ToggleSeeReply()
    {
        if (!isFirstLoadReply)
        {
            isFirstLoadReply = true;
            if (ListReplyCommentUserNew.Count != 0)
            {
                ListReplyCommentUserNew = new List<ReplyDTO>();
            }
        }
        isLoadReply = !isLoadReply;
    }

    void LikeCount()
    {
        @if (Like == null || Like == "")
        {
            LikeText = "0";
        }
        else
        {
            var customCulture = (CultureInfo)CultureInfo.InvariantCulture.Clone();
            customCulture.NumberFormat.NumberGroupSeparator = ".";
            var ListLike = Like.Split("|").ToList();
            if (ListLike.Contains(IdUser.ToString()))
            {
                LikeText = $"{(ListLike.Count).ToString("N0", customCulture)}";
                isUserLike = true;
            }
            else
            {
                LikeText = ListLike.Count().ToString("N0", customCulture);
                isUserLike = false;
            }
        }
    }

    private async Task CopyCurrentUrl()
    {
        var currentUrl = Navigation.Uri; // Lấy URL hiện tại
                                         //currentUrl =
        await JSRunTime.InvokeVoidAsync("copyToClipboard", currentUrl);
        Snackbar.Add("Đã sao chép đường dẫn bài viết vào bộ nhớ", Severity.Success);
    }

    void ShowComment()
    {
        isAddCmt = true;
    }

    void HideComment()
    {
        isAddCmt = false;
    }

    async Task UserAddNewComment(Guid idReply)
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await _httpClient.GetStringAsync($"/commment/getReplyCommentDetail/{idReply}");
        var commentDTO = JsonConvert.DeserializeObject<ReplyDTO>(result);
        if (commentDTO != null)
        {
            ListReplyCommentUserNew.Add(commentDTO);
        }
        StateHasChanged();
    }


    void ShowUpdateComment()
    {
        isUpdate = true;
        ContentUpdate = Content;
        StateHasChanged();
    }

    async Task OnExecute(Radzen.HtmlEditorExecuteEventArgs args)
    {
        if (args.CommandName == "AddCode")
        {
            await AddCode(args.Editor);
        }
    }

    async Task AddCode(Radzen.Blazor.RadzenHtmlEditor editor)
    {
        await editor.ExecuteCommandAsync(Radzen.HtmlEditorCommands.InsertHtml, "<br></br>");
        await editor.ExecuteCommandAsync(Radzen.HtmlEditorCommands.InsertHtml, $@"<div style=""background-color:beige;border-radius:5px;"" class=""m-3 pt-3 ps-3 codeContainer""><pre><code>&nbsp;</code></pre></div> <br/>");
    }

    void HideUpdatetAction()
    {
        isUpdate = false;
        StateHasChanged();
    }

    async Task UpdateComment()
    {
        if (string.IsNullOrEmpty(ContentUpdate))
        {
            Snackbar.Add("Không thể bỏ trống bình luận", Severity.Error);
            return;
        }
        if (!HasContent(ContentUpdate))
        {
            Snackbar.Add("Không thể bỏ trống bình luận", Severity.Error);
            return;
        }

        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await httpClient.PutAsJsonAsync($"/commment/updateComment/{IdCmt}", ContentUpdate);
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Cập nhật bình luận thành công", Severity.Success);
            Content = ContentUpdate;
            ContentHtml = (MarkupString)Content;
            isUpdate = false;
            StateHasChanged();
        }
    }

    bool HasContent(string htmlString)
    {
        var doc = new HtmlDocument();
        doc.LoadHtml(htmlString);

        // Kiểm tra nội dung văn bản
        return !string.IsNullOrWhiteSpace(doc.DocumentNode.InnerText);
    }

    async Task DeleteComment()
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Xác nhận bạn muốn xóa bình luận này, sẽ xóa vĩnh viễn và không thể khôi phục?");
        parameters.Add(x => x.ButtonText, "Xóa");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Xác nhận", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
                var response = await _httpClient.DeleteAsync($"/commment/deleteCmt/{IdCmt}/{IdUser}");
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Đã xóa bình luận", Severity.Info);
                    isDeleted = true;
                    StateHasChanged();
                }
            }
        }
    }

}

