@page "/listPost"
@using ASM_PH35423.StaticClass
@using Client.Components.ComponentCustom
@using Data.DTO.EntitiDTO
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Radzen
@using Radzen.Blazor
@using System.Collections

@inject IJSRuntime JSRunTime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IWebHostEnvironment env

@if (PostDetail == null)
{
    <select class="form-select mt-3 ms-4" style="width:150px;" @onchange="(v) => SortChange(v)">
        <option value="0">Mới nhất</option>
        <option value="1">Phổ biến trong tuần</option>
    </select>
}
@if (!isLoaded)
{
    <LoadingLocal></LoadingLocal>
}
else
{
    <style>
        html {
            scroll-behavior: auto !important;
        }
    </style>

    <div>
        <div class="mt-3 ms-4" style="width:70%; display: @(PostDetail == null?"block":"none");">
            @foreach (var item in listIntroPost)
            {
                <PostIntro Avatar="@item.Avatar" Content="@item.Content" Link="@item.Link"
                           CreateDate="@item.CreateDate" IdPost="@item.Id"
                           CommentCount="@item.CommentCount" Like="@item.Like"
                           VideoFile="@item.VideoFile" ImgFile="@item.ImgFile"
                           UserName="@item.UserName" TagNames="@item.ListTag" IdUserPost="@item.IdUser"
                           Title="@item.Title" WatchDetailPost="DetailPost">
                </PostIntro>
            }
        </div>
    </div>

    @if (PostDetail != null)
    {
        <div>
            <div class="mt-3 ms-4" style="width:70%;">
                <PostDetail Avatar="@PostDetail.Avatar" Content="@PostDetail.Content" Link="@PostDetail.Link"
                            CreateDate="@PostDetail.CreateDate" IdPost="@PostDetail.Id"
                            CommentCount="@PostDetail.CommentCount" Like="@PostDetail.Like"
                            VideoFile="@PostDetail.VideoFile" IdUserPost="@PostDetail.IdUser"
                            UserName="@PostDetail.UserName" TagNames="@PostDetail.ListTag"
                            Title="@PostDetail.Title" GoBack="GoBack">
                </PostDetail>
            </div>
        </div>
    }
    <div class="mt-5">

    </div>
}
<script>
    function onScrollToEnd(dotNetHelper) {
        window.addEventListener('scroll', () => {
            if (Math.ceil((window.innerHeight + window.scrollY)) >= document.body.offsetHeight) {
                dotNetHelper.invokeMethodAsync('OnScrollToEnd');
            }
        });
    }
</script>

@code {
    List<PostIntroDTO> listIntroPost = new List<PostIntroDTO>();

    PostIntroDTO? PostDetail = null;
    private double ScrollPosition = 0;

    bool isLoaded;

    private DotNetObjectReference<ListPost>? dotNetRef;

    int PosttCount = 20;

    int Sort = 0;

    Guid? IdUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userCurrent = UserManager.GetUserId(user);
        if (userCurrent != null)
        {
            IdUser = Guid.Parse(userCurrent);
        }
        else
        {
            IdUser = null;
        }
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");

        var result = await _httpClient.PostAsJsonAsync($"/GetListPostIntro/{IdUser}", new List<Guid>());

        var resultConverted = JsonConvert.DeserializeObject<List<PostIntroDTO>>(await result.Content.ReadAsStringAsync());
        if (resultConverted != null)
        {
            listIntroPost = resultConverted;
        }
        isLoaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRunTime.InvokeVoidAsync("onScrollToEnd", dotNetRef);
        }
        if (!firstRender && ScrollPosition > 0 && PostDetail == null)
        {
            await JSRunTime.InvokeVoidAsync("restoreScrollPosition", ScrollPosition);
        }
    }

    async Task SortChange(ChangeEventArgs v)
    {
        isLoaded = false;
        Sort = Convert.ToInt16(v.Value);
        await JSRunTime.InvokeVoidAsync("restoreScrollPosition", 0);
        PosttCount = 20;
        listIntroPost = new List<PostIntroDTO>();
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        if (Sort == 0)
        {
            var result = await _httpClient.PostAsJsonAsync($"/GetListPostIntro/{IdUser}", new List<Guid>());

            var resultConverted = JsonConvert.DeserializeObject<List<PostIntroDTO>>(await result.Content.ReadAsStringAsync());
            if (resultConverted != null)
            {
                listIntroPost = resultConverted;
            }
        }
        else
        {
            var result = await _httpClient.PostAsJsonAsync($"/GetListPostHot/{IdUser}", new List<Guid>());

            var resultConverted = JsonConvert.DeserializeObject<List<PostIntroDTO>>(await result.Content.ReadAsStringAsync());
            if (resultConverted != null)
            {
                listIntroPost = resultConverted;
            }
        }
        isLoaded = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }

    [JSInvokable]
    public async Task OnScrollToEnd()
    {
        if (listIntroPost.Count < PosttCount || listIntroPost.Count % 20 != 0)
        {
            return;
        }
        else
        {
            var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");

            var listIdUserCmt = listIntroPost.Select(a => a.Id).ToList();
            var listIdCmt = listIntroPost.Select(a => a.Id).ToList();
            listIdCmt.AddRange(listIdUserCmt);
            HttpResponseMessage result;
            if (Sort == 0)
            {
                result = await _httpClient.PostAsJsonAsync($"/GetListPostIntro/{IdUser}", listIdCmt);
            }
            else
            {
                result = await _httpClient.PostAsJsonAsync($"/GetListPostHot/{IdUser}", listIdCmt);
            }

            if (result.IsSuccessStatusCode)
            {
                var data = await result.Content.ReadAsStringAsync();
                var ListCommentGetMore = JsonConvert.DeserializeObject<List<PostIntroDTO>>(data);
                if (ListCommentGetMore != null && ListCommentGetMore.Count != 0)
                {
                    listIntroPost.AddRange(ListCommentGetMore);
                    PosttCount += ListCommentGetMore.Count;
                    StateHasChanged();
                }
            }

        }
    }


    async Task DetailPost(Guid idPost)
    {
        dotNetRef?.Dispose();
        ScrollPosition = await JSRunTime.InvokeAsync<double>("saveScrollPosition");
        PostDetail = listIntroPost.FirstOrDefault(a => a.Id == idPost);
        StateHasChanged();
    }
    async Task GoBack()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        await JSRunTime.InvokeVoidAsync("onScrollToEnd", dotNetRef);
        PostDetail = null;
    }
}
