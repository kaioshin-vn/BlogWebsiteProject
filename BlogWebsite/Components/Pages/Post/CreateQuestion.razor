@page "/createQuestion"
@using Data.DTO.EntitiDTO
@using System.Net.Http.Headers

@inject IJSRuntime JSRunTime
@inject  IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

@if (createPost == null)
{
    <MudText>Loading...</MudText>
}
<MudContainer MaxWidth="MaxWidth.Large" Class="my-container">
    <MudGrid>
        <MudItem xs="8" >
            <MudCard Class="p-4">
                <MudGrid Justify="Justify.SpaceBetween" >
                    <MudItem>
                        <MudText Typo="Typo.h6">Create Question</MudText>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="Variant.Text">Drafts</MudButton>
                    </MudItem>
                </MudGrid>
                <MudDivider/>
                <MudCardActions Class="my-4" >
                    <MudButton  Variant="Variant.Text" Color="Color.Dark">Text</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Dark">Images & Video</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Dark">Link</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Dark" Disabled="true">Poll</MudButton>
                </MudCardActions>
                <MudForm @ref="form">
                    <MudGrid>
                         <MudItem xs="12">
                            <MudTextField Style="border-radius:20px" @bind-Value="createPost.Title" Label="Tiêu đề" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Style="border-radius:20px" @bind-Value="createPost.Description" Label="Mô tả" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-start ">
                            <MudItem>
                                <MudFileUpload T="IBrowserFile" @bind-Files="imgFile" OnFilesChanged="UploadFile">
                                    <ActivatorContent>
                                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Image" />
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudItem>
                            <MudItem>
                                @if (!string.IsNullOrEmpty(fileName))
                                {
                                    <MudText Class="pt-3">Tên ảnh đã chọn: @fileName</MudText>
                                }
                            </MudItem>
                            
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="p-2" Justify="Justify.FlexStart">
                        <MudItem>
                            <MudButton Variant="Variant.Text" Class="p-2">Add tags</MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="12">
                                 <Client.Components.ComponentCustom.EditorPost></Client.Components.ComponentCustom.EditorPost>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Justify="Justify.FlexEnd">
                        <MudItem>
                            <MudButton Class="mt-3" OnClick="( ()=> ComeBack())" Variant="Variant.Filled" Color="Color.Default">Come Back</MudButton>
                            <MudButton Class="mt-3" OnClick="(async ()=> await CreatePostSubmit())" Variant="Variant.Filled"  Color="Color.Primary">Create Post</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudCard>
                <MudCardHeader>
                    <h1>@createPost.Content</h1>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Đây là nội dung của thẻ 2.</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<script>
    $(document).ready(function () {
        console.log("jQuery is loaded!");
        $('#summerNote').summernote({
            height: 120,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture', 'video']],
                ['height', ['height']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ]
        });
    });

    function getSummernoteContent() {
        return $('#summerNote').summernote('code');
    }
</script>

@code {
    private MudForm form;

    IBrowserFile imgFile;

    private string fileName { get; set; }

    PostDTO createPost = new PostDTO();

    private void  UploadFile()
    {
        if (imgFile != null)
            fileName = imgFile.Name;
    }

    public class ViewModelTest
    {
        public Guid Id;
        public string Title;
        public string Description;

    }

    public async Task CreatePostSubmit()
    {
        var content = new MultipartFormDataContent();


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userCurrent = await UserManager.GetUserAsync(user);
        var userId = userCurrent.Id;
        createPost.IdUser = userId;

        content.Add(new StringContent(createPost.IdUser.ToString()), "userId");
        content.Add(new StringContent(createPost.Title), "title");
        content.Add(new StringContent(createPost.Description), "description");
        content.Add(new StringContent(await JSRunTime.InvokeAsync<string>("getSummernoteContent")), "content");

        // Lấy nội dung từ Summernote
        if (imgFile != null)
        {
            var fileContent = new StreamContent(imgFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(imgFile.ContentType);
            content.Add(fileContent, "imgFile", imgFile.Name);
        }

        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await httpClient.PostAsync("/api/post/createPost", content); 
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/question");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorMessage}");
        }
    }


    private void ComeBack()
    {
        Navigation.NavigateTo("/question");
    }
}
