@page "/profile"
@using System.Security.Claims
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudCard>
        <MudCardMedia Image="/Img/univer.png" Height="300" />
    </MudCard>
    <div class="d-flex justify-space-between align-center" style="margin-top: -26px;">
        <div class="d-flex align-center">
            <MudAvatar Style="width: 160px; height: 160px; border: 4px solid white;" Class="mb-3 mb-md-0">
                <MudImage Src="@(_avatarUrl ?? "/Img/avatar_default.jpg")"></MudImage>
            </MudAvatar>
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadAvatar" Accept="image/*">
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.PhotoCamera"
                                       Class="position-absolute mud-elevation-3"
                                       Style="bottom: -70px; right: -5px; background-color: darkgrey; border-radius: 50%; padding: 8px;color:azure">
                        </MudIconButton>
                    </ActivatorContent>
                </MudFileUpload>
            <div class="ms-2 text-start">
                <MudText Typo="Typo.h4">@model.FullName</MudText>
                <MudText Typo="Typo.body1" Class="mb-2">Người theo dõi: @model.CountFollow.ToString("N0", System.Globalization.CultureInfo.InvariantCulture)</MudText>
            </div>
        </div>
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => _editMode = true)" />
        </div>
    </div>
    <MudGrid Class="mt-4">
        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Thông tin cá nhân</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudList T="string">
                        @if (!string.IsNullOrEmpty(model.Address))
                        {
                            <MudListItem Icon="@Icons.Material.Filled.LocationOn" Text="@($"Địa chỉ: {model.Address}")" />
                        }
                        <MudListItem Icon="@Icons.Material.Filled.Phone" Text="@($"Điện thoại: {model.PhoneNumber}")" />
                        <MudListItem Icon="@Icons.Material.Filled.Email" Text="@($"Email: {model.Email}")" />
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="8">
            @if (_editMode)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Chỉnh sửa thông tin</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm Model="@model" @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
                            <MudTextField T="string" Label="Họ và tên" @bind-Value="model.FullName" For="@(() => model.FullName)" />
                            <MudTextField T="string" Label="Địa chỉ" @bind-Value="model.Address" For="@(() => model.Address)" />
                            <MudTextField T="string" Label="Số điện thoại" @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" />
                            <MudTextField T="string" Label="Email" @bind-Value="model.Email" For="@(() => model.Email)" />
                            <MudTextField T="string" Label="Giới thiệu" @bind-Value="model.Descript" For="@(() => model.Descript)" Lines="3" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveChanges">Lưu thay đổi</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => _editMode = false)">Hủy</MudButton>
                    </MudCardActions>
                </MudCard>
            }
            else
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Giới thiệu</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body1">@model.Descript</MudText>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    public string Id { get; set; }
    private bool _editMode = false;
    private bool success;
    private string[] errors = { };
    private MudForm form;
    private string _avatarUrl;
    private bool IsCurrentUser = false;

    private PersonalInfoModel model = new PersonalInfoModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await GetInfo(currentUserId);
        Id = currentUserId;
    }
    private async Task GetInfo(string id)
    {
        var client = ClientFactory.CreateClient("MyHttpClient");
        var response = await client.GetAsync($"api/users/{id}");
        if (response.IsSuccessStatusCode)
        {
            model = await response.Content.ReadFromJsonAsync<PersonalInfoModel>();
            _avatarUrl = model.Img;
            model.ImgCover = "";
            model.IdViewer = "";
        }
        else
        {
            Snackbar.Add("Không thể tải thông tin người dùng.", Severity.Error);
        }
    }
    private async Task SaveChanges()
    {
        await form.Validate();

        if (success)
        {
            var client = ClientFactory.CreateClient("MyHttpClient");
            var response = await client.PutAsJsonAsync($"api/users/{Id}", model);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Thông tin đã được cập nhật thành công!", Severity.Success);
                _editMode = false;
            }
            else
            {
                Snackbar.Add("Không thể cập nhật thông tin. Vui lòng thử lại.", Severity.Error);
            }
        }
    }
    private async Task UploadAvatar(IBrowserFile file)
    {
        var client = ClientFactory.CreateClient("MyHttpClient");
        if (file != null && file.Size > 0)
        {
            // Kiểm tra định dạng file
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            if (!allowedExtensions.Contains(fileExtension))
            {
                // Hiển thị thông báo lỗi hoặc xử lý khi định dạng không hợp lệ
                Snackbar.Add("Định dạng file không hợp lệ!",Severity.Error);
                return;
            }
            var fileName = Path.GetFileName(file.Name);
            var newFileName = Guid.NewGuid() + fileName;
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot\images", newFileName);
            var directoryPath = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }
            // Lưu file xuống disk
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }
            var url = $"/images/{newFileName}";
            model.Img = url;
        }
        var response = await client.PutAsJsonAsync($"api/users/{Id}", model);
        if (response.IsSuccessStatusCode)
        {
            _avatarUrl = model.Img;
            Snackbar.Add("Ảnh đại diện đã được cập nhật thành công!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Không thể cập nhật ảnh đại diện. Vui lòng thử lại.", Severity.Error);
        }
    }
    public class PersonalInfoModel
    {
        public string? Descript { get; set; }
        public string? Img { get; set; }
        public string? FullName { get; set; }
        public string? ImgCover { get; set; } 
        public string? Address { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }
        public string Id { get; set; }
        public string IdViewer { get; set; }
        public int CountFollow { get; set; }
        public bool IsFollowing { get; set; }
    }
}