@page "/ManageAccount"


@using Client.Components.ComponentCustom
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (!LoadingSucces)
{
    <Client.Components.ComponentCustom.LoadingLocal></Client.Components.ComponentCustom.LoadingLocal>
}
else
{

    <div class="top-row px-4 d-flex justify-content-center">
        <input type="text" @bind-value="Search" class="form-control" style="width : 550px" id="search" placeholder="Nhập tên đăng nhập, tên tài khoản hoặc email " aria-label="Recipient's username" aria-describedby="basic-addon2">
        <button @onclick="SearchAction" class="input-group-text fw-lagre mx-3" style="background-color: rgb(42, 198, 255);border:solid 2px grey" id=""> Tìm kiếm</button>
    </div>
    <MudContainer Class="mb-5" MaxWidth="MaxWidth.Large">
        <MudSwitch Class="mt-3" T="bool" Color="Color.Success" ValueChanged="SearchBan">Danh sách tài khoản bị chặn</MudSwitch>
        @if (ListUser.Count == 0)
        {
            <p class="mt-3">Không tìm thấy tài khoản nào</p>
        }
        else
        {
            <MudSimpleTable Class="my-10" Elevation="3" Style="overflow-x: auto;">
                <thead>
                    <tr>
                        <th>Tên đăng nhập</th>
                        <th>Tên tài khoản</th>
                        <th>Email</th>
                        <th>Vai trò</th>
                        <th>Chức năng</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in ListUser)
                    {
                        <tr>
                            <td><a href="/other-profile/@row.Id"><b>@row.FullName</b></a></td>
                            <td>@row.AccountName</td>
                            <td>@row.Email</td>
                            @if (row.ListRole.Count == 0)
                            {
                                <td>Null</td>
                            }
                            else
                            {
                                <td>@String.Join(", ", row.ListRole)</td>
                            }

                            <td>
                                @if (row.Open)
                                {
                                    <MudPaper Elevation="3" Class="p-4 d-flex justify-content-between align-items-end">
                                        @if (listRole.Count == 0)
                                        {
                                            <MudAlert Class="mt-5" Severity="Severity.Info" Variant="Variant.Filled">Hệ thống chưa có quyền nào</MudAlert>
                                        }
                                        else
                                        {
                                            <div>
                                                @foreach (var item in listRole)
                                                {
                                                    var checkd = false;
                                                    if (row.ListIdRole.Any(a => a == item.Id))
                                                    {
                                                        checkd = true;
                                                    }
                                                    <MudCheckBox @onclick="() => CheckBoxHanlde(row.Id , item.Id)" Class="d-block" Value="checkd" Color="Color.Success">@item.Name</MudCheckBox>
                                                }
                                            </div>
                                            <MudButton OnClick="() => SaveChange(row.Id)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save" Color="Color.Success">Lưu</MudButton>
                                        }
                                        <MudButton OnClick="() => ToggleDrawer(row)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.CancelPresentation" Color="Color.Error">Hủy</MudButton>
                                    </MudPaper>
                                }
                                else
                                {
                                    <MudButton OnClick="() => GetAllRoleUser(row.Id)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowCircleUp" Color="Color.Tertiary">Thay đổi quyền</MudButton>
                                    if (!row.IsBaned)
                                    {
                                        <MudButton Class="mx-3" OnClick="() => BanUser(row.Id)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.CancelPresentation" Color="Color.Error">Khóa tài khoản</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Class="mx-3" OnClick="() => UnbanUser(row.Id.ToString())" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Accessibility" Color="Color.Success">Mở khóa tài khoản</MudButton>
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudContainer>

    <div class="d-flex justify-content-center">
        <MudPagination Color="Color.Primary" Count="TotalPage" @bind-value="@Page" SelectedChanged="LoadUser" />
    </div>
}



@code {
    List<UserTrans> ListUser = new List<UserTrans>();
    bool Open;
    bool LoadingSucces = false;
    List<IdentityRole<Guid>> listRole;
    List<Guid> ListIdRoleUser = new List<Guid>();

    string Search = "";

    bool searchBan;

    int Page = 1;

    int TotalPage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
        var _http = HttpClientFactory.CreateClient("MyHttpClient");
        var data = await _http.GetStringAsync($"/GetTotalUserPage/{searchBan}/{Search}");
        TotalPage = JsonConvert.DeserializeObject<int>(data);
        TotalPage++;
        LoadingSucces = true;
    }

    void CheckBoxHanlde(Guid idUser, Guid id)
    {
        var user = ListUser.FirstOrDefault(a => a.Id == idUser);
        if (user.ListIdRole.Any(a => a == id))
        {
            user.ListIdRole.Remove(id);
        }
        else
        {
            user.ListIdRole.Add(id);
        }
    }

    async Task SearchBan()
    {
        searchBan = !searchBan;
        await LoadUser();
    }

    async Task LoadUser()
    {
        ListUser.Clear();
        var _http = HttpClientFactory.CreateClient("MyHttpClient");
        var data = await _http.GetStringAsync($"/GetListUser/{Page}/{searchBan}/{Search}");

        var listUser = JsonConvert.DeserializeObject<List<ApplicationUser>>(data);


        foreach (var item in listUser)
        {
            var user = new UserTrans();
            user.Id = item.Id;
            user.FullName = item.FullName;
            user.AccountName = item.UserName;
            user.Email = item.Email;
            data = await _http.GetStringAsync($"/GetRoleUser/{item.Id}");
            user.ListRole = JsonConvert.DeserializeObject<List<string>>(data);
            data = await _http.GetStringAsync($"/GetIdRoleUser/{item.Id}");
            user.ListIdRole = JsonConvert.DeserializeObject<List<Guid>>(data);
            user.IsBaned = (item.LockoutEnd != null);
            ListUser.Add(user);
        }
    }

    async Task SaveChange(Guid id)
    {
        var _http = HttpClientFactory.CreateClient("MyHttpClient");
        var user = ListUser.FirstOrDefault(a => a.Id == id);
        if (user != null)
        {
            await ToggleDrawer(user);
            var data = await _http.PostAsJsonAsync($"/UpdateUser/{id}", user.ListIdRole);
            if (data.IsSuccessStatusCode)
            {
                Snackbar.Add("Cập nhật quyền tài khoản thành công", Severity.Info);
                await LoadUser();
            }
        }
    }

    async Task GetAllRoleUser(Guid id)
    {
        var _http = HttpClientFactory.CreateClient("MyHttpClient");

        var data = await _http.GetStringAsync($"/GetIdRoleUser/{id}");

        var user = ListUser.FirstOrDefault(a => a.Id == id);

        if (user != null)
        {
            user.ListIdRole = JsonConvert.DeserializeObject<List<Guid>>(data);

            data = await _http.GetStringAsync($"/GetListRole");
            listRole = JsonConvert.DeserializeObject<List<IdentityRole<Guid>>>(data);
            await ToggleDrawer(user);
        }
    }

    async Task BanUser(Guid id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Xác nhận bạn muốn khóa tài khoản này?");
        parameters.Add(x => x.ButtonText, "Khóa");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Xác nhận", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var userCurent = authState.User;
                var idUserCurrent = UserManager.GetUserId(userCurent);
                var idUser = Guid.Parse(idUserCurrent);
                if (id.ToString() == idUser.ToString())
                {
                    Snackbar.Add("Không thể khóa tài khoản đang sử dụng", Severity.Error);
                    return;
                }
                var user = await UserManager.FindByIdAsync(id.ToString());

                var lockoutEnd = DateTimeOffset.UtcNow.AddYears(100);
                await UserManager.SetLockoutEndDateAsync(user, lockoutEnd);
                Snackbar.Add("Đã khóa tài khoản này", Severity.Info);
                await LoadUser();
            }
        }
    }
    public async Task UnbanUser(string userId)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Xác nhận bạn muốn mở khóa tài khoản này?");
        parameters.Add(x => x.ButtonText, "Xác nhận");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Xác nhận", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                var user = await UserManager.FindByIdAsync(userId);

                var lockoutResult = await UserManager.SetLockoutEndDateAsync(user, null);
                Snackbar.Add("Mở khóa tài khoản thành công", Severity.Success);
                await LoadUser();
            }
        }


    }


    async Task SearchAction()
    {
        await LoadUser();
    }

    async Task ToggleDrawer(UserTrans user)
    {
        user.Open = !user.Open;
    }

    internal class UserTrans
    {
        public Guid Id;
        public string FullName;
        public string AccountName;
        public string Email;
        public List<string?> ListRole;
        public List<Guid> ListIdRole;
        public bool Open;
        public bool IsBaned;
    }
}