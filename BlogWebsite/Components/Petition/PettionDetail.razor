@page "/PetitionDetail/{Id:guid}"

@using ASM_PH35423.StaticClass
@using Client.Components.ComponentCustom
@using Data.DTO
@using Data.DTO.EntitiDTO
@using System.Net.Http.Headers
@using Data.Database.Table
@using Data.Enums
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization;

@inject IJSRuntime JSRunTime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<style>
    html {
        scroll-behavior: auto !important;
    }

    .content_by_user img {
        display: block; /* Chuyển ảnh thành khối để dễ căn giữa */
        margin: 0 auto; /* Căn giữa theo chiều ngang */
        height: 300px; /* Chiều cao của ảnh */
        border-radius: 8px; /* Bo góc */
    }

    .rz-html-editor:focus-within {
        outline: none !important;
    }

    .rz-html-editor-content img {
        display: block; /* Chuyển ảnh thành khối để dễ căn giữa */
        margin: 0 auto; /* Căn giữa theo chiều ngang */
        height: 300px; /* Chiều cao của ảnh */
        border-radius: 8px; /* Bo góc */
    }

    .pointer:hover {
        cursor: pointer;
    }

    .hover:hover {
        color: forestgreen;
        transform: translateY(-4px);
    }

    .hover-post:hover {
        background-color: rgb(249, 249, 249);
        cursor: pointer;
        transform: translateY(-4px);
    }

    .hover-post {
        transform: translateY(0);
        /* Thêm transition để tạo hiệu ứng mượt khi chuyển đổi */
        transition: transform 0.3s ease;
    }

    .hover {
        transform: translateY(0);
        /* Thêm transition để tạo hiệu ứng mượt khi chuyển đổi */
        transition: transform 0.3s ease;
    }

    .hover-underline:hover {
        text-decoration: underline;
        cursor: pointer;
    }

    .hover-border:hover {
        border: 2px solid transparent;
        cursor: pointer;
    }

    .codeContainer {
        display: block !important;
    }

    .hover-border {
        border: 2px solid lightgrey;
        transition: border 0.3s ease-in-out;
    }

    .under-line:hover {
        text-decoration: underline;
        cursor: pointer;
    }
</style>

@if (!Loaded)
{
    <LoadingLocal></LoadingLocal>
}
else
{

    if (!isFail)
    {
        <div>
            <MudCardHeader>
                <CardHeaderAvatar>
                        <MudAvatar Class="hover-border">
                            <MudImage Src="@this.Petition.User.Img"></MudImage>
                        </MudAvatar>
                </CardHeaderAvatar>

                <CardHeaderContent>
                    <MudText Typo="Typo.body1"><b class="hover-underline">@this.Petition.User.FullName</b></MudText>
                </CardHeaderContent>
            </MudCardHeader>


            <MudCardContent Class="my-1 py-0">
                <div class="content_by_user">
                    ContentHtml
                </div>
            </MudCardContent>

            <MudGrid Class="mx-5 my-2">
                <MudItem xs="6" Class="p-0" sm="6">
                    <MudButton Variant="Variant.Text" Style="width:75%;padding:0px;" OnClick="() => AccepClick(Id)">
                        <MudIconButton Style="padding:10px;" OnClick="() => AccepClick(Id)" Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                        <MudText>Xác nhận</MudText>
                    </MudButton>
                </MudItem>
                <MudItem xs="6" Class="p-0" sm="6">
                    <MudButton Variant="Variant.Text" OnClick="() => DeclineClick(Id)" Style="width:75%;padding:0px;">
                        <MudIconButton OnClick="() => DeclineClick(Id)" Style="padding:10px;" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
                        <MudText>Từ chối</MudText>
                    </MudButton>
                </MudItem>

            </MudGrid>
        </div>
    }
    else
    {
        <div class="my-5 mx-auto">
            <h3>Oops</h3>
            <p>Có vẻ như đơn khiếu nại này đã bị xóa</p>
        </div>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    public Guid IdUserPost { get; set; }

    public Petition Petition = new Petition();

    MarkupString ContentHtml { get; set; }

    bool Loaded { get; set; }
    bool isFail { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await _httpClient.GetStringAsync($"/getPetitionDetail/{Id}");

        if (result == null)
        {
            isFail = true;
            Loaded = true;
            return;
        }

        Petition = JsonConvert.DeserializeObject<Petition>(result);

        ContentHtml = (MarkupString)Petition.Content;

        Loaded = true;
    }


    async Task AccepClick(Guid Idpost)
    {
        Console.WriteLine("Hello");
        // var parameters = new DialogParameters<Dialog>();
        // parameters.Add(x => x.ContentText, "Xác nhận bài viết này đã vi phạm, sẽ xóa bài viết này và tài khoản sẽ được tính là vi phạm 1 lần?");
        // parameters.Add(x => x.ButtonText, "Đồng ý");
        // parameters.Add(x => x.Color, Color.Error);

        // var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        // var result = await DialogService.Show<Dialog>("Xác nhận", parameters, options).Result;
        // if (result.Data != null)
        // {
        //     if ((bool)result.Data)
        //     {
        //         var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        //         var response = await _httpClient.PostAsJsonAsync($"/deletePost/{IdPost}", IdUserPost);
        //         if (response.IsSuccessStatusCode)
        //         {
        //             await _httpClient.GetStringAsync($"/report/changeStateReport/{IdPost}/{WaitState.Accept}");

        //             var hubConnection = new HubConnectionBuilder()
        //     .WithUrl(Navigation.ToAbsoluteUri("/hubNotice"))
        //     .Build();

        //             await hubConnection.StartAsync();


        //             var notice = new Notice();
        //             notice.Id = Guid.NewGuid();
        //             notice.FromUser = IdUser;
        //             notice.ToUser = IdUserPost;
        //             notice.Content = $"Bài viết {Title} của bạn đã vi phạm tiêu chuẩn cộng đồng nên đã bị xóa";
        //             notice.CreateDate = DateTime.Now;
        //             notice.Link = $"/violation/{notice.Id}";
        //             await _httpClient.PostAsJsonAsync($"/addNewNotice", notice);

        //             await hubConnection.SendAsync("SendPrivateMessage", IdUserPost.ToString());


        //             Snackbar.Add("Bài viết đã bị xóa", Severity.Info);
        //             Navigation.NavigateTo("/report");
        //         }
        //     }
        // }
    }

    async Task DeclineClick(Guid Idpost)
    {
        Console.WriteLine("Hi");

        // var parameters = new DialogParameters<Dialog>();
        // parameters.Add(x => x.ContentText, "Xác nhận bài viết này không vi phạm ?");
        // parameters.Add(x => x.ButtonText, "Đồng ý");
        // parameters.Add(x => x.Color, Color.Success);

        // var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        // var result = await DialogService.Show<Dialog>("Xác nhận", parameters, options).Result;
        // if (result.Data != null)
        // {
        //     if ((bool)result.Data)
        //     {
        //         var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");

        //         await _httpClient.GetStringAsync($"/report/changeStateReport/{IdPost}/{WaitState.Decline}");
        //         Snackbar.Add("Xác nhận trạng thái thành công", Severity.Info);
        //         Navigation.NavigateTo("/report");
        //     }
        // }
    }
}

