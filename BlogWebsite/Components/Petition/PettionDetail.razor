@page "/PetitionDetail/{Id:guid}"

@using ASM_PH35423.StaticClass
@using Client.Components.Admin
@using Client.Components.ComponentCustom
@using Data.DTO
@using Data.DTO.EntitiDTO
@using System.Net.Http.Headers
@using Data.Database.Table
@using Data.Enums
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization;
@using System.Net.Mail
@using System.Net

@attribute [Authorize(Roles = "Admin, Sub Admin")]
@inject IJSRuntime JSRunTime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<style>
    html {
        scroll-behavior: auto !important;
    }

    .content_by_user img {
        display: block; /* Chuyển ảnh thành khối để dễ căn giữa */
        margin: 0 auto; /* Căn giữa theo chiều ngang */
        height: 300px; /* Chiều cao của ảnh */
        border-radius: 8px; /* Bo góc */
    }

    .rz-html-editor:focus-within {
        outline: none !important;
    }

    .rz-html-editor-content img {
        display: block; /* Chuyển ảnh thành khối để dễ căn giữa */
        margin: 0 auto; /* Căn giữa theo chiều ngang */
        height: 300px; /* Chiều cao của ảnh */
        border-radius: 8px; /* Bo góc */
    }

    .pointer:hover {
        cursor: pointer;
    }

    .hover:hover {
        color: forestgreen;
        transform: translateY(-4px);
    }

    .hover-post:hover {
        background-color: rgb(249, 249, 249);
        cursor: pointer;
        transform: translateY(-4px);
    }

    .hover-post {
        transform: translateY(0);
        /* Thêm transition để tạo hiệu ứng mượt khi chuyển đổi */
        transition: transform 0.3s ease;
    }

    .hover {
        transform: translateY(0);
        /* Thêm transition để tạo hiệu ứng mượt khi chuyển đổi */
        transition: transform 0.3s ease;
    }

    .hover-underline:hover {
        text-decoration: underline;
        cursor: pointer;
    }

    .hover-border:hover {
        border: 2px solid transparent;
        cursor: pointer;
    }

    .codeContainer {
        display: block !important;
    }

    .hover-border {
        border: 2px solid lightgrey;
        transition: border 0.3s ease-in-out;
    }

    .under-line:hover {
        text-decoration: underline;
        cursor: pointer;
    }
</style>

@if (!Loaded)
{
    <LoadingLocal></LoadingLocal>
}
else
{

    if (!isFail)
    {
        <div>
            <MudCardHeader>
                <CardHeaderAvatar>
                        <MudAvatar Class="hover-border">
                            <MudImage Src="@this.Petition.User.Img"></MudImage>
                        </MudAvatar>
                </CardHeaderAvatar>

                <CardHeaderContent>
                    <MudText Typo="Typo.body1"><b class="hover-underline">@this.Petition.User.FullName</b></MudText>
                </CardHeaderContent>
            </MudCardHeader>


            <MudCardContent Class="my-1 py-0">
                <div class="content_by_user">
                    @this.ContentHtml
                </div>
            </MudCardContent>

            <MudGrid Class="mx-5 my-2">
                <MudItem xs="6" Class="p-0" sm="6">
                    <MudButton Variant="Variant.Text" Style="width:75%;padding:0px;" OnClick="() => AccepClick(Petition.IdUser)">
                        <MudIconButton Style="padding:10px;" OnClick="() => AccepClick(Petition.IdUser)" Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                        <MudText>Xác nhận</MudText>
                    </MudButton>
                </MudItem>
                <MudItem xs="6" Class="p-0" sm="6">
                    <MudButton Variant="Variant.Text" OnClick="() => DeclineClick(Petition.IdUser)" Style="width:75%;padding:0px;">
                        <MudIconButton OnClick="() => DeclineClick(Petition.IdUser)" Style="padding:10px;" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
                        <MudText>Từ chối</MudText>
                    </MudButton>
                </MudItem>
            </MudGrid>
        </div>
    }
    else
    {
        <div class="my-5 mx-auto">
            <h3>Oops</h3>
            <p>Có vẻ như đơn khiếu nại này đã bị xóa</p>
        </div>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    public Guid IdUserPost { get; set; }

    public Petition Petition = new Petition();

    MarkupString ContentHtml { get; set; }

    bool Loaded { get; set; }
    bool isFail { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await _httpClient.GetStringAsync($"/getPetitionDetail/{Id}");

        if (string.IsNullOrEmpty(result))
        {
            isFail = true;
            Loaded = true;
            return;
        }

        Petition = JsonConvert.DeserializeObject<Petition>(result);

        ContentHtml = (MarkupString)Petition.Content;

        Loaded = true;
    }


    async Task AccepClick(Guid IdUser)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Xác nhận bạn muốn mở khóa tài khoản này?");
        parameters.Add(x => x.ButtonText, "Xác nhận");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Xác nhận", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
                var data = await _httpClient.PutAsJsonAsync($"/changepetition/{Petition.Id}", WaitState.Accept);
                /////////
                var user = await UserManager.FindByIdAsync(IdUser.ToString());

                var lockoutResult = await UserManager.SetLockoutEndDateAsync(user, null);

                var from = new MailAddress("trangcthph46782@fpt.edu.vn", "KAIZEN");
                var to = new MailAddress(user.Email);
                const string subject = "Tài khoản đã được mở khóa";
                const string frompass = "xrlz fpkb hjfe lbdw";


                string body = $"Tài khoản của bạn đã được chúng tôi mở khóa, hãy rút kinh nghiệm cho những lần sau";
                using (var smtpClient = new SmtpClient
                    {
                        Host = "smtp.gmail.com",
                        Port = 587,
                        EnableSsl = true,
                        DeliveryMethod = SmtpDeliveryMethod.Network,
                        Credentials = new NetworkCredential(from.Address, frompass)
                    })
                using (var message = new MailMessage(from, to)
                    {
                        Subject = subject,
                        Body = body,
                        IsBodyHtml = true,
                    })
                {
                    await smtpClient.SendMailAsync(message);
                }

                Snackbar.Add("Mở khóa tài khoản thành công", Severity.Success);
                Navigation.NavigateTo("/listpetition");
            }
        }

    }

    async Task DeclineClick(Guid IdUser)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Xác nhận bạn muốn từ chối khiếu nại của tài khoản này, tài khoản sẽ bị khóa vĩnh viễn?");
        parameters.Add(x => x.ButtonText, "Xác nhận");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Xác nhận", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
                var data = await _httpClient.PutAsJsonAsync($"/changepetition/{Petition.Id}", WaitState.Decline);
                /////////
                var user = await UserManager.FindByIdAsync(IdUser.ToString());

                var lockoutResult = await UserManager.SetLockoutEndDateAsync(user, null);

                var from = new MailAddress("trangcthph46782@fpt.edu.vn", "KAIZEN");
                var to = new MailAddress(user.Email);
                const string subject = "Khiếu nại của bạn đã bị từ chối";
                const string frompass = "xrlz fpkb hjfe lbdw";


                string body = $"Chúng tôi rất tiếc phải thông báo rằng khiếu nại của bạn đã bị từ chối, do đó tài khoản của bạn đã bị ban vĩnh viễn, đây sẽ là lần <b>cuối cùng </b> chúng tôi phản hồi về tài khoản của bạn";
                using (var smtpClient = new SmtpClient
                    {
                        Host = "smtp.gmail.com",
                        Port = 587,
                        EnableSsl = true,
                        DeliveryMethod = SmtpDeliveryMethod.Network,
                        Credentials = new NetworkCredential(from.Address, frompass)
                    })
                using (var message = new MailMessage(from, to)
                    {
                        Subject = subject,
                        Body = body,
                        IsBodyHtml = true,
                    })
                {
                    await smtpClient.SendMailAsync(message);
                }
                Navigation.NavigateTo("/listpetition");
            }
        }
    }
}

