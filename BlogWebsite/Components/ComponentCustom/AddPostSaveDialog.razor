@page "/addPostSave/{idPost:guid}"
@*  bị trùng AddPostSaveDialog *@
@using MudBlazor

@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar

@if (lstPostSave == null)
{
    <MudText>loading</MudText>
}
<MudDialog Class="w-50">
    <DialogContent >
        <MudGrid Class="p-0" Justify="Justify.SpaceBetween">
            <MudItem/>
            <MudItem>
                <MudText Typo="Typo.h6">Lưu vào</MudText>
            </MudItem>
            <MudItem>
                <MudIconButton OnClick="Cancel" Class="p-0" Size="Size.Medium" Icon="@Icons.Material.Filled.Close"></MudIconButton>
            </MudItem>
        </MudGrid>
        <MudDivider Light/>
    </DialogContent>
    <DialogActions>
        <MudGrid>
            <MudItem xs="12">
                <MudList T="string" CheckBoxColor="Color.Tertiary" Style="overflow:scroll; max-height:370px">
                    @foreach (var item in lstPostSave)
                    {
                        <MudListItem>
                            <MudRadioGroup @bind-Value="IdSave">
                                <MudGrid Justify="Justify.SpaceBetween"
                                         Class="cursor-pointer"
                                         @onclick="@(() => IdSave = item.Id)">
                                    <MudItem Class="d-flex align-content-around">
                                        <MudAvatar Color="Color.Primary" Class="rounded-2">
                                            @item.SaveName[0]
                                        </MudAvatar>
                                        <MudText Class="px-2 pt-2">@item.SaveName</MudText>
                                    </MudItem>
                                    <MudItem>
                                        <MudRadio T="Guid" Value="item.Id" Color="Color.Primary" />
                                    </MudItem>
                                </MudGrid>
                            </MudRadioGroup>
                        </MudListItem>
                    }
                </MudList>
               
            </MudItem>
            <MudItem xs="12">
                <MudDivider />
                @if (!isCreatingNewCollection)
                {
                    <MudButton OnClick="ShowCreateInput" Variant="Variant.Filled" Class="m-3">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                        <MudText>Bộ sưu tập mới</MudText>
                    </MudButton>
                }
                else
                {
                    <MudPaper Class="m-3 d-flex align-center gap-2 pa-2">
                        <MudTextField @bind-Value="savePost.SaveName"
                                      Placeholder="Nhập tên bộ sưu tập"
                                      Immediate="true"
                                      Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Check"
                                       Color="Color.Success"
                                       OnClick="CreateNewCollection" />
                        <MudIconButton Icon="@Icons.Material.Filled.Close"
                                       Color="Color.Error"
                                       OnClick="CancelCreate" />
                    </MudPaper>
                }
                <MudDivider Light />
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-content-end">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddPostSave">Xong</MudButton>
            </MudItem>
        </MudGrid>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    [Parameter]
    public Guid idPost { get; set; }

    private Guid IdSave { get; set; }
    private string radio { get; set; }

    List<SaveDTO> lstPostSave = new List<SaveDTO>();

    PostDTO lstPost = new PostDTO();

    SaveDTO savePost = new SaveDTO();

    private bool isCreatingNewCollection = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var idUserCurrent = UserManager.GetUserId(user);
        var idUser = Guid.Parse(idUserCurrent);
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        lstPostSave = await httpClient.GetFromJsonAsync<List<SaveDTO>>($"/api/save/get_savepost/{idUser}");
    }

    private void SaveId(Guid id)
    {
        IdSave = id;
    }

    private async Task AddPostSave()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // var userCurrent = await UserManager.GetUserAsync(user);
        // var userId = userCurrent.Id;
        // lstPost.IdUser = userId;
        var payload = new { idPost = idPost, IdSave = IdSave };

        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await httpClient.PostAsJsonAsync($"/api/postsave/addPostSave/{idPost}/{IdSave}", payload);
        if (result.IsSuccessStatusCode)
        {
            Dialog.Close(DialogResult.Cancel());
            Snackbar.Add("Thêm bài viết vào bộ sưu tập thành công!", Severity.Success);
        }
        else
        {
            Dialog.Close(DialogResult.Cancel());
            Snackbar.Add("Thêm bài viết vào bộ sưu tập thất bại, bài viết đã có trong bộ sưu tập!", Severity.Error);
        }
    }

    private void ShowCreateInput()
    {
        isCreatingNewCollection = true;
    }

    private void CancelCreate()
    {
        isCreatingNewCollection = false;
    }

    private async Task CreateNewCollection()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userCurrent = await UserManager.GetUserAsync(user);
        var userId = userCurrent.Id;
        savePost.IdUser = userId;

        if (string.IsNullOrWhiteSpace(savePost.SaveName))
        {
            Snackbar.Add("Vui lòng nhập tên bộ sưu tập!", Severity.Warning);
            return;
        }
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await httpClient.PostAsJsonAsync("/api/save/create_savepost", savePost);
        if (response.IsSuccessStatusCode)
        {
            // Cập nhật lại danh sách
            lstPostSave = await httpClient.GetFromJsonAsync<List<SaveDTO>>($"/api/save/get_savepost/{userId}");
            Snackbar.Add("Tạo bộ sưu tập thành công!", Severity.Success);

            // Reset trạng thái
            isCreatingNewCollection = false;
            savePost.SaveName = "";
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Tạo bộ sưu tập thất bại!", Severity.Error);
        }
    }

    private void Cancel()
    {
        Dialog.Close(DialogResult.Cancel());
    }
}
