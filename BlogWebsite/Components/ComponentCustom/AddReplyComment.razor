@using Data.Database.Table
@using HtmlAgilityPack;
@using Microsoft.AspNetCore.SignalR.Client

@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<div style="border:1px solid  rgb(206, 206, 206); border-radius:12px;" class="p-2 my-2">
    <Radzen.Blazor.RadzenHtmlEditor @bind-Value="@Reply.Content" @ref="radzenHtmlEditor" Execute="@OnExecute" style="min-height:80px; height: auto;max-width:675px;border:none ;overflow:hidden;" UploadUrl="minimalApi/uploadImage">
        <Radzen.Blazor.RadzenHtmlEditorUndo Title="Trước" />
        <Radzen.Blazor.RadzenHtmlEditorRedo Title="Sau" />
        <Radzen.Blazor.RadzenHtmlEditorSeparator />
        <Radzen.Blazor.RadzenHtmlEditorBold Title="In đậm" />
        <Radzen.Blazor.RadzenHtmlEditorItalic Title="In nghiêng" />
        <Radzen.Blazor.RadzenHtmlEditorUnderline Title="Gạch chân" />
        <Radzen.Blazor.RadzenHtmlEditorStrikeThrough Title="Xuyên qua" />
        <Radzen.Blazor.RadzenHtmlEditorSeparator />
        <Radzen.Blazor.RadzenHtmlEditorAlignLeft Title="Căn trái" />
        <Radzen.Blazor.RadzenHtmlEditorAlignCenter Title="Căn giữa" />
        <Radzen.Blazor.RadzenHtmlEditorAlignRight Title="Căn phải" />
        @* <RadzenHtmlEditorJustify Title="Căn đều" /> *@
        <Radzen.Blazor.RadzenHtmlEditorSeparator />
        <Radzen.Blazor.RadzenHtmlEditorIndent Title="Thụt lề" />
        <Radzen.Blazor.RadzenHtmlEditorOutdent Title="Nhô lề" />
        @* <RadzenHtmlEditorUnorderedList Title="Danh sách" /> *@
        <Radzen.Blazor.RadzenHtmlEditorOrderedList Title="Danh sách sắp xếp" />
        <Radzen.Blazor.RadzenHtmlEditorSeparator />
        @* <Radzen.Blazor.RadzenHtmlEditorColor Title="Màu chữ" />
        <Radzen.Blazor.RadzenHtmlEditorBackground Title="Màu nền" />
        <Radzen.Blazor.RadzenHtmlEditorRemoveFormat Title="Bỏ định dạng" />
        <Radzen.Blazor.RadzenHtmlEditorSeparator /> *@
        @* <RadzenHtmlEditorSubscript Title="Chữ phía dưới" />
        <RadzenHtmlEditorSuperscript Title="Chữ phía trên" /> *@
        @* <RadzenHtmlEditorSeparator /> *@
        <Radzen.Blazor.RadzenHtmlEditorLink Title="Thêm link" CancelText="Hủy" LinkText="Hiển thị" OpenInNewWindowText="Mở trong cửa số mới" UrlText="Đường dẫn" />
        <Radzen.Blazor.RadzenHtmlEditorUnlink Title="Bỏ đường dẫn" />
        <Radzen.Blazor.RadzenHtmlEditorImage Title="Thêm ảnh" ShowHeight="false" ShowWidth="false" ShowAlt="false" UploadChooseText="Tải ảnh lên" AltText="Tên ảnh" CancelText="Hủy" SelectText="Chọn ảnh tải lên" UrlText="Nếu không có sẵn ảnh trên máy, hãy nhập đường dẫn ảnh trên web" HeightText="Chiều cao" WidthText="Chiều rộng" />
        <Radzen.Blazor.RadzenHtmlEditorSeparator />
        @* <Radzen.Blazor.RadzenHtmlEditorFontName Title="Phông chữ" Placeholder="Phông chữ" />
        <Radzen.Blazor.RadzenHtmlEditorFontSize Title="Kích thước" Placeholder="Cỡ chữ" /> *@
        @* <RadzenHtmlEditorFormatBlock Title="Cỡ chữ" Placeholder="Cỡ chữ" NormalText="Thông thường" Heading1Text="Loại 1" Heading2Text="Loại 2" Heading3Text="Loại 3" Heading4Text="Loại 4" Heading5Text="Loại 5" Heading6Text="Loại 6" /> *@
        @* <Radzen.Blazor.RadzenHtmlEditorSeparator /> *@
        <Radzen.Blazor.RadzenHtmlEditorCustomTool CommandName="AddCode" Icon="code" Title="Code" />
    </Radzen.Blazor.RadzenHtmlEditor>

    <div class="d-flex justify-content-end mb-2">
        <MudButton Variant="Variant.Filled" OnClick="HideCommentAction" Size="Size.Small" Class="mx-3">Hủy</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Small" OnClick="AddNewComment">Bình luận</MudButton>
    </div>
</div>

@code {
    bool isAddComment { get; set; }
    ReplyResponse Reply { get; set; } = new ReplyResponse();

    [Parameter]
    public Guid IdUserComment { get; set; }
    [Parameter]
    public Guid IdCmt { get; set; }
    [Parameter]
    public string UserName { get; set; }

    [Parameter]
    public EventCallback HideComment { get; set; }

    [Parameter]
    public EventCallback<Guid> UserAddComment { get; set; }

    public Guid IdUserCurrent { get; set; }


    Radzen.Blazor.RadzenHtmlEditor radzenHtmlEditor { get; set; }

    async Task OnExecute(Radzen.HtmlEditorExecuteEventArgs args)
    {
        if (args.CommandName == "AddCode")
        {
            await AddCode(args.Editor);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var idUserCurrent = UserManager.GetUserId(user);
        if (idUserCurrent != null)
        {
            IdUserCurrent = Guid.Parse(idUserCurrent);
        }
        if (IdUserComment != IdUserCurrent)
        {
            Reply.Content = $@"<a href=""/other-profile/{IdUserComment.ToString()}"" style=""color:rgb(60, 190, 226);"" class=""{IdUserComment.ToString()} hover-underline"" contenteditable=""false""><b class=""me-1"" >{this.UserName} </b></a>&nbsp;";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await radzenHtmlEditor.FocusAsync();
    }

    async Task AddCode(Radzen.Blazor.RadzenHtmlEditor editor)
    {
        await editor.ExecuteCommandAsync(Radzen.HtmlEditorCommands.InsertHtml, "<br></br>");
        await editor.ExecuteCommandAsync(Radzen.HtmlEditorCommands.InsertHtml, $@"<div style=""background-color:beige;border-radius:5px;"" class=""m-3 pt-3 ps-3 codeContainer""><pre><code>&nbsp;</code></pre></div> <br/>");
    }

    async void HideCommentAction()
    {
        if (HideComment.HasDelegate)
        {
            await HideComment.InvokeAsync();
        }
    }

    async Task AddNewComment()
    {
        if (string.IsNullOrEmpty(Reply.Content))
        {
            Snackbar.Add("Không thể bỏ trống bình luận", Severity.Error);
            return;
        }
        if (!HasContent(Reply.Content))
        {
            Snackbar.Add("Không thể bỏ trống bình luận", Severity.Error);
            return;
        }
        if (HideComment.HasDelegate)
        {
            await HideComment.InvokeAsync();
        }
        var id = Guid.NewGuid();
        Reply.Id = id;

        Reply.IdUser = IdUserCurrent;
        Reply.IdResponse = IdCmt;
        if (Reply.Content.Contains(IdUserComment.ToString()))
        {
            Reply.Mention = IdUserComment;
        }
        Reply.Likes = "";
        var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await httpClient.PostAsJsonAsync("comment/addNewReplyComment", Reply);

        if (result.IsSuccessStatusCode)
        {
            if (Reply.Mention != null)
            {
                var hubConnection = new HubConnectionBuilder()
                                    .WithUrl(Navigation.ToAbsoluteUri("/hubNotice"))
                                    .Build();

                await hubConnection.StartAsync();
                var notice = new Notice();
                notice.Id = Guid.NewGuid();
                notice.FromUser = IdUserCurrent;
                notice.ToUser = IdUserComment;
                notice.Content = "Đã nhắc đến bạn trong 1 bình luận gần đây";
                notice.CreateDate = DateTime.Now;
                notice.Link = $"/commentDetail/{IdCmt}";
                await httpClient.PostAsJsonAsync($"/addNewNotice", notice);
                await hubConnection.SendAsync("SendPrivateMessage", IdUserComment.ToString());
            }
            if (UserAddComment.HasDelegate)
            {
                Reply.Content = "";
                await UserAddComment.InvokeAsync(Reply.Id);
            }
        }
        return;
    }

    bool HasContent(string htmlString)
    {
        var doc = new HtmlDocument();
        doc.LoadHtml(htmlString);

        // Kiểm tra nội dung văn bản
        return !string.IsNullOrWhiteSpace(doc.DocumentNode.InnerText);
    }

}