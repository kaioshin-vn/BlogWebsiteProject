@using ASM_PH35423.StaticClass
@using Client.Components.ComponentCustom
@using Data.DTO.EntitiDTO
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Radzen
@using Radzen.Blazor

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IWebHostEnvironment env

@if (!isLoaded)
{
    <LoadingLocal></LoadingLocal>
}
else
{
    if (ListCommentPost.Count == 0 && ListNewComment.Count == 0)
    {
        <p>Hiện chưa có bình luận nào</p>
    }
    else
    {
        <select class="form-select mt-3 ms-4" style="width:150px;" @onchange="(v) => SortChange(v)">
            <option value="0">Mới nhất</option>
            <option value="1">Nổi bật nhất</option>
        </select>
        if (ListNewComment.Count > 0)
        {
            @foreach (var item in ListNewComment)
            {
                <CommentDetail Avatar="@item.Avatar" Content="@item.Content"
                               CreateDate="@item.CreateDate" IdPost="@item.Id" IdCmt="@item.Id"
                               ReplyCount="@item.ReplyCount" Like="@item.Like" IdUserComment="@item.IdUser"
                               UserName="@item.UserName">
                </CommentDetail>
            }
        }
        @foreach (var item in ListCommentPost)
        {
            <CommentDetail Avatar="@item.Avatar" Content="@item.Content" IdUserPost="IdUserPost"
                           CreateDate="@item.CreateDate" IdPost="@item.Id" IdCmt="@item.Id"
                           ReplyCount="@item.ReplyCount" Like="@item.Like" IdUserComment="@item.IdUser"
                           UserName="@item.UserName">
            </CommentDetail>
        }
        if (loadMoreCmt)
        {
            <LoadingLocal></LoadingLocal>
        }
    }
}
<script>
    function onScrollToEnd(dotNetHelper) {
        window.addEventListener('scroll', () => {
            if (Math.ceil((window.innerHeight + window.scrollY)) >= document.body.offsetHeight) {
                dotNetHelper.invokeMethodAsync('OnScrollToEnd');
            }
        });
    }
</script>

@code {
    [Parameter]
    public Guid IdPost { get; set; }

    [Parameter]
    public Guid IdUserPost { get; set; }

    List<CommentDTO> ListCommentPost { get; set; } = new List<CommentDTO>();
    List<CommentDTO> ListNewComment { get; set; } = new List<CommentDTO>();

    private double ScrollPosition = 0;

    int CommentCount = 20;

    private DotNetObjectReference<ListComment>? dotNetRef;

    bool loadMoreCmt;

    bool isLoaded;

    int Sort = 0;

    protected override async Task OnInitializedAsync()
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await _httpClient.PostAsJsonAsync($"/commment/getAllComments/{IdPost}", new List<Guid>());
        if (result.IsSuccessStatusCode)
        {
            var data = await result.Content.ReadAsStringAsync();
            ListCommentPost = JsonConvert.DeserializeObject<List<CommentDTO>>(data);
            isLoaded = true;
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("onScrollToEnd", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnScrollToEnd()
    {
        if (ListCommentPost.Count < CommentCount || ListCommentPost.Count % 20 != 0)
        {
            return;
        }
        else
        {
            Console.WriteLine("Hello");
            loadMoreCmt = true;
            var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");

            var listIdUserCmt = ListNewComment.Select(a => a.Id).ToList();
            var listIdCmt = ListCommentPost.Select(a => a.Id).ToList();
            listIdCmt.AddRange(listIdUserCmt);
            HttpResponseMessage result;
            if (Sort == 0)
            {
                result = await _httpClient.PostAsJsonAsync($"/commment/getAllComments/{IdPost}", listIdCmt);
            }
            else
            {
                result = await _httpClient.PostAsJsonAsync($"/commment/getAllHotComments/{IdPost}", listIdCmt);
            }

            if (result.IsSuccessStatusCode)
            {
                var data = await result.Content.ReadAsStringAsync();
                var ListCommentGetMore = JsonConvert.DeserializeObject<List<CommentDTO>>(data);
                if (ListCommentGetMore != null && ListCommentGetMore.Count != 0)
                {
                    ListCommentPost.AddRange(ListCommentGetMore);
                    CommentCount += ListCommentGetMore.Count;
                    loadMoreCmt = false;
                    StateHasChanged();
                }
            }
        }
    }

    async Task SortChange(ChangeEventArgs v)
    {
        isLoaded = false;
        Sort = Convert.ToInt16(v.Value);
        await JSRuntime.InvokeVoidAsync("restoreScrollPosition", 0);
        CommentCount = 20;
        ListCommentPost = new List<CommentDTO>();
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        if (Sort == 0)
        {
            var result = await _httpClient.PostAsJsonAsync($"/commment/getAllComments/{IdPost}", new List<Guid>());

            var resultConverted = JsonConvert.DeserializeObject<List<CommentDTO>>(await result.Content.ReadAsStringAsync());
            if (resultConverted != null)
            {
                ListCommentPost = resultConverted;
            }
        }
        else
        {
            var result = await _httpClient.PostAsJsonAsync($"/commment/getAllHotComments/{IdPost}", new List<Guid>());

            var resultConverted = JsonConvert.DeserializeObject<List<CommentDTO>>(await result.Content.ReadAsStringAsync());
            if (resultConverted != null)
            {
                ListCommentPost = resultConverted;
            }
        }
        isLoaded = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
    public async Task AddNewComment(PostCommentDTO newCmt)
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var result = await _httpClient.GetStringAsync($"/commment/getCommentDetail/{newCmt.Id}");
        var commentDTO = JsonConvert.DeserializeObject<CommentDTO>(result);
        if (commentDTO != null)
        {
            ListNewComment.Add(commentDTO);
        }
        StateHasChanged();
    }
}
