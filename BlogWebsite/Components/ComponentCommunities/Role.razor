@page "/groups/{Name}/{id:guid}"
@using Client.Components.Pages.Post
@using Data.Database.Table
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using Data.DTO.EntitiDTO
@using Data.DTO
@using Client.Components.ComponentCustom
@using Data.Enums
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRunTime

<h1>Thông tin đối tượng</h1>
@if (user != null)
{
	<MudTextField @bind-Value="user.FullName" Label="Tên" Disabled="true" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
	<MudSelect @bind-Value="user.Position" Label="Chức vụ" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
		<MudSelectItem Value="Data.Enums.Position.Chief">Trưởng nhóm</MudSelectItem>
		<MudSelectItem Value="Data.Enums.Position.Deputy">Phó nhóm</MudSelectItem>
		<MudSelectItem Value="Data.Enums.Position.Member">Thành viên</MudSelectItem>
	</MudSelect>
	<MudButton Class="mt-3" OnClick="() => SubmitRequest()" Variant="Variant.Filled" Color="Color.Success">
		Cập nhật
	</MudButton>

	<MudButton Class="mt-3 ms-4" OnClick="() => ComBack()" Variant="Variant.Filled" Color="Color.Error">
		Quay lại
	</MudButton>
}
else
{
	<MudText Typo="Typo.h6">Không tìm thấy đối tượng với ID này.</MudText>
}
@code {
	[Parameter]
	public string Name { get; set; }
	[Parameter]
	public Guid Id { get; set; }
	private MemberDTO user = new MemberDTO();

	protected override async Task OnInitializedAsync()
	{
		if (Id != Guid.Empty)
		{
			user = await GetUserInfo(Id);
		}
	}
	protected override async Task OnParametersSetAsync()
	{
		user = await GetUserInfo(Id);
	}

	private async Task<MemberDTO> GetUserInfo(Guid id)
	{
		try
		{
			var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
			var response = await httpClient.GetAsync($"api/group/get-member/{id}?groupName={Name}");
			if (response.IsSuccessStatusCode)
			{
				var member = await response.Content.ReadFromJsonAsync<MemberDTO>();
				return member;
			}
			else
			{
				Console.WriteLine("Không thể lấy thông tin thành viên");
				return null;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Lỗi khi gọi API: {ex.Message}");
			return null;
		}
	}

	private async Task SubmitRequest()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var userCurrent = await UserManager.GetUserAsync(authState.User);
		var currentUserId = userCurrent?.Id;
		Console.WriteLine($"Id: {Id}");
		Console.WriteLine(JsonConvert.SerializeObject(user));

		if (Id == Guid.Empty || user == null)
		{
			Console.WriteLine("Dữ liệu không hợp lệ!");
			return;
		}
		Guid memberId = Id;
		user.Id = Id;
		Console.WriteLine($"User Id: {user.Id}");
		Console.WriteLine($"User FullName: {user.FullName}");
		Console.WriteLine($"User Position: {user.Position}");
		Console.WriteLine($"memberID: {memberId}");

		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");

		// Truyền thêm userId trong tham số truy vấn
		var response = await httpClient.PutAsJsonAsync($"api/group/update-member/{memberId}?userId={currentUserId}&groupName={Name}", user);

		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Thành công");
			Navigation.NavigateTo($"/groups/{Name}/mod");
		}
		else
		{
			Console.WriteLine("Thất bại");
		}
	}

	private void ComBack()
	{
		Navigation.NavigateTo($"/groups/{Name}/mod");
	}


}
