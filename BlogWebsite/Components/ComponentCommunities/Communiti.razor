@page "/groups/{Name}/mod"

@using Client.Components.Pages.Post
@using Data.Database.Table
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using Data.DTO.EntitiDTO
@using Data.DTO
@using Client.Components.ComponentCustom
@using Data.Enums
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRunTime
@inject ISnackbar Snackbar
<style>
	.person-list {
		list-style-type: none;
		padding: 0;
	}

		.person-list li {
			display: flex;
			gap: 20px; /* Điều chỉnh khoảng cách giữa các cột */
			padding: 5px 0;
		}

	.header {
		font-weight: bold;
	}
</style>
@if (isLoaded)
{
	<MudTabs Elevation="1" Rounded="true" PanelClass="pa-6">

		@if (isChiefOrDeputy)
		{
			<MudTabPanel Text="Danh sách">
				<MudText>
					<h3>Danh sách Thành viên và Admin của Nhóm: @Name</h3>

					@if (allMembers != null && allMembers.Any())
					{
						<MudTable Items="@allMembers" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
							<HeaderContent>
								<MudTh>Tên</MudTh>
								<MudTh>Chức vụ</MudTh>
								<MudTh>Quyền chỉnh sửa</MudTh>
								<MudTh>Thao tác</MudTh>
							</HeaderContent>
							<RowTemplate>
								<MudTd DataLabel="Tên">@context.FullName</MudTd>
								@if (context.Position == Data.Enums.Position.Chief)
								{
									<MudTd DataLabel="Chức vụ">Trưởng nhóm</MudTd>
								}
								else if (context.Position == Data.Enums.Position.Deputy)
								{
									<MudTd DataLabel="Chức vụ">Phó nhóm</MudTd>
								}
								else
								{
									<MudTd DataLabel="Chức vụ">Thành viên</MudTd>
								}
								@if (context.Position == Data.Enums.Position.Chief)
								{
									<MudTd DataLabel="Quyền chỉnh sửa">Mọi thứ</MudTd>
								}
								else if (context.Position == Data.Enums.Position.Deputy)
								{
									<MudTd DataLabel="Quyền chỉnh sửa">Xóa thành viên, duyệt bài</MudTd>
								}
								else
								{
									<MudTd DataLabel="Quyền chỉnh sửa">Không có quyền</MudTd>
								}
								<MudTd DataLabel="Thao tác" Style="padding-left: 0">
									<MudIconButton Icon="@Icons.Material.Filled.Delete"
												   OnClick="() => OnclickDelete(context.Id)"
												   Disabled="isActionDisabled[context.Id]" />

									<MudIconButton Icon="@Icons.Material.Filled.Create"
												   OnClick="() => OnclickNavigation(context.Id)"
												   Disabled="isActionDisabled[context.Id]" />
								</MudTd>

							</RowTemplate>
						</MudTable>
					}
					else
					{
						<p>Không có thành viên hoặc admin nào trong nhóm.</p>
					}
				</MudText>
			</MudTabPanel>
			@if (stateGroup)
			{
				<MudTabPanel Text="Duyệt bài">
					<MudText>
						<h3>Danh sách bài cần duyệt của Nhóm: @Name</h3>

						@if (allMembers != null && allMembers.Any())
						{
							<ul class="person-list">
								<li class="header">
									<span>Duyệt bài</span>
								</li>
								@foreach (var name in allMembers)
								{
									<li>
										<span>Duyệt bài</span>
									</li>
								}
							</ul>
						}
						else
						{
							<p>Không có thành viên hoặc admin nào trong nhóm.</p>
						}
					</MudText>
				</MudTabPanel>
			}
		}
		else
		{
			<MudTabPanel Text="Danh sách">
				<MudText>
					<h3>Danh sách Thành viên và Admin của Nhóm: @Name</h3>

					@if (allMembers != null && allMembers.Any())
					{
						<MudTable Items="@allMembers" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
							<HeaderContent>
								<MudTh>Tên</MudTh>
								<MudTh>Chức vụ</MudTh>
								<MudTh>Quyền chỉnh sửa</MudTh>

							</HeaderContent>
							<RowTemplate>
								<MudTd DataLabel="Tên">@context.FullName</MudTd>
								@if (context.Position == Data.Enums.Position.Chief)
								{
									<MudTd DataLabel="Chức vụ">Trưởng nhóm</MudTd>
								}
								else if (context.Position == Data.Enums.Position.Deputy)
								{
									<MudTd DataLabel="Chức vụ">Phó nhóm</MudTd>
								}
								else if (context.Position == Data.Enums.Position.Member)
								{
									<MudTd DataLabel="Chức vụ">Thành viên</MudTd>
								}
								@if (context.Position == Data.Enums.Position.Chief)
								{
									<MudTd DataLabel="Quyền chỉnh sửa">Mọi thứ</MudTd>
								}
								else if (context.Position == Data.Enums.Position.Deputy)
								{
									<MudTd DataLabel="Quyền chỉnh sửa">Xóa thành viên, duyệt bài</MudTd>

								}
								else
								{
									<MudTd DataLabel="Quyền chỉnh sửa">Không có quyền</MudTd>
								}
							</RowTemplate>
						</MudTable>
					}
					else
					{
						<p>Không có thành viên hoặc admin nào trong nhóm.</p>
					}
				</MudText>
			</MudTabPanel>
		}
	</MudTabs>
}
else
{
	<LoadingLocal></LoadingLocal>
}



@code {
	[Parameter]
	public string Name { get; set; }
	List<MemberDTO> allMembers = new List<MemberDTO>();
	bool isChiefOrDeputy = false;
	bool currentUserIsDeputy = false;
	private bool stateGroup = false;
	private Dictionary<Guid, bool> isActionDisabled = new Dictionary<Guid, bool>();
	bool isLoaded;
	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(Name))
		{
			await LoadMembers();
			await CheckUser();
			await CheckGroupState();
		}
		foreach (var member in allMembers)
		{
			// Lưu trữ kết quả của mỗi thành viên vào dictionary
			bool isDisabled = await IsActionDisabled(member.Id);
			isActionDisabled[member.Id] = isDisabled;
		}
		isLoaded = true;
	}

	protected override async Task OnParametersSetAsync()
	{
		await LoadMembers();
		await CheckGroupState();
	}

	private async Task CheckGroupState()
	{
		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
		var response = await httpClient.GetAsync($"api/group/state-group/{Name}");

		if (response.IsSuccessStatusCode)
		{
			stateGroup = await response.Content.ReadFromJsonAsync<bool>();
			Console.WriteLine($"Trạng thái nhóm: {stateGroup}");
		}
		else
		{
			Console.WriteLine("Không thể kiểm tra trạng thái nhóm.");
		}
	}

	private async Task LoadMembers()
	{
		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
		var response = await httpClient.GetAsync($"api/group/get-members/{Name}");

		if (response.IsSuccessStatusCode)
		{
			allMembers = await response.Content.ReadFromJsonAsync<List<MemberDTO>>();
			Console.WriteLine("Danh sách thành viên đã được tải thành công.");
		}
		else
		{
			Console.WriteLine("Không thể kiểm tra danh sách nhóm.");
		}
	}

	private async Task<bool> IsActionDisabled(Guid targetUserId)
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var userCurrent = await UserManager.GetUserAsync(authState.User);
		if (userCurrent != null)
		{
			bool currentUserIsDeputy = allMembers.Any(a => a.Id == userCurrent.Id && a.Position == Data.Enums.Position.Deputy);
			bool targetUserIsChief = allMembers.Any(mg => mg.Id == targetUserId && mg.Position == Data.Enums.Position.Chief);
			return currentUserIsDeputy && targetUserIsChief;
		}
		return false;
	}

	private async Task CheckUser()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var userCurrent = await UserManager.GetUserAsync(authState.User);
		if (userCurrent != null)
		{
			isChiefOrDeputy = allMembers.Any(a => a.Id == userCurrent.Id && (
				a.Position == Data.Enums.Position.Chief ||
				a.Position == Data.Enums.Position.Deputy));
		}
	}

	private async Task OnclickDelete(Guid id)
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var userCurrent = UserManager.GetUserId(user);
		var currentUserId = Guid.Parse(userCurrent);
		Console.WriteLine($"currentUserId:t {currentUserId}");
		if (currentUserId == null)
		{
			Console.WriteLine("Không tìm thấy người dùng.");
			return;
		}

		// ID thành viên cần xóa
		Guid memberId = id;
		Console.WriteLine($"memberId:t {memberId}");
		Console.WriteLine($"currentUserId: {currentUserId}, memberId: {memberId}");

		// Lấy vai trò của người dùng hiện tại
		var currentUserRole = allMembers.FirstOrDefault(m => m.Id == currentUserId)?.Position;
		//Lấy thành viên bị xóa từ danh sách
		var targetMemberRole = allMembers.FirstOrDefault(m => m.Id == memberId)?.Position;

		// Kiểm tra nếu người dùng là phó nhóm và đang cố gắng xóa một phó nhóm khác
		if (currentUserRole == Data.Enums.Position.Deputy && targetMemberRole == Data.Enums.Position.Deputy)
		{
			Snackbar.Add("Phó nhóm không thể xóa phó nhóm khác.", Severity.Warning);
			return;
		}
		// Kiểm tra nếu người dùng là chủ nhóm và đang cố gắng tự đăng xuất mình
		if (currentUserId == memberId)
		{
			Snackbar.Add("Không xóa được chính mình khi là trưởng nhóm.", Severity.Warning);
			return;
		}
		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
		var response = await httpClient.DeleteAsync($"api/group/member/{memberId}?userId={currentUserId}&groupName={Name}");
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Xóa thành công.");
			await LoadMembers();
		}
		else
		{
			var errorResponse = await response.Content.ReadAsStringAsync();
			Console.WriteLine("Error Response: " + errorResponse);
		}
		StateHasChanged();
	}

	private async Task OnclickNavigation(Guid id)
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var userCurrent = UserManager.GetUserId(user);
		var currentUserId = Guid.Parse(userCurrent);
		var checkDeputy = DbContext.MemberGroups.Include(a => a.Group).FirstOrDefault(a => a.IdMember == currentUserId && a.Group.Name == Name && a.Position == Data.Enums.Position.Deputy);
		if (checkDeputy != null)
		{
			Snackbar.Add("Chỉ có trưởng nhóm mới có quyền chỉnh sửa", Severity.Warning);
			return;
		}
		Console.WriteLine($"id đây: {id}");
		Navigation.NavigateTo($"/groups/{(Name)}/{id}");
	}

}

