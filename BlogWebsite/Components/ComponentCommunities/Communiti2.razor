@page "/groups/{Name}"

@using Client.Components.Pages.Post
@using Data.Database.Table
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using Data.DTO.EntitiDTO
@using Client.Components.ComponentCustom
@using Data.Enums
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRunTime

<style>


	.spt {
		font-weight: 700; /* Hoặc bất kỳ thuộc tính nào để thẻ span hiển thị rõ ràng */
	}

	.contain {
		max-width: 100%;
	}


	#another_unique_identifier {
		min-height: 600px;
		overflow: hidden;
		overflow-x: hidden;
		padding-top: 10px;
		padding-left: 20px; /* Giữ khoảng cách bên trái cho thanh cuộn */
		box-sizing: border-box; /* Đảm bảo padding không thay đổi kích thước */
	}

		#another_unique_identifier:hover {
			overflow: auto;
			overflow-x: hidden;
			padding-left: 20px; /* Đảm bảo khoảng cách bên trái không thay đổi khi hover */
		}

</style>

@if (listIntroPost == null || group == null)
{
	<LoadingLocal></LoadingLocal>
}
else
{
	<div class="contain" style="width: 90%; margin: 0 auto;">
		<MudItem>
			@{
				var imgSrc = string.IsNullOrEmpty(group.ImgCover) ? "/img/icon.jpg" : group.ImgCover;
				var bannerSrc = string.IsNullOrEmpty(group.ImgGroup) ? "/img/univer.png" : group.ImgGroup;
			}
			<!-- Banner Group -->
			<div>
				<div>
					<img src="@bannerSrc" alt="Community Banner"
						 style="width: 100%; height: 150px; object-fit: cover; border-radius: 12px;" />
				</div>

				<!-- Thẻ chứa ảnh đại diện nhóm và tên nhóm chồng lên ảnh banner -->
				<div class="d-flex justify-content-between align-items-center px-3" style=" position: relative; left: 5px; z-index: 1; top: -26px;">
					<div class="d-flex align-items-center">
						<!-- Ảnh đại diện nhóm -->
						<MudImage Src="@imgSrc" Alt="Group Avatar" Class="avatar" Style="width:80px; height:80px; border-radius:50%;border: 2px solid #fff" />
						<MudText Variant="Variant.h6" Class="group-name mt-12" Style="margin-left: 10px; font-weight:600; font-size: 26px">@group.Name</MudText>
					</div>
					<div class="actions mt-8">

						@{
							if (IsAdmin)
							{
								if (group.StateGroup == KindGroup.Public || group.StateGroup == KindGroup.Restricted || group.StateGroup == KindGroup.Private)
								{
									<!-- Nút tạo bài đăng -->
									<MudTooltip Class="mx-1" Text="Thêm mới bài viết">
										<MudFab Class="mx-1" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium"
												Style="border:none;box-shadow:none;background-color:none;" Label="Tạo mới"
												@onclick="NavigateToCreatePostPage" />
									</MudTooltip>
								}
							}
							if (group.StateGroup == KindGroup.Public && isJoined == true)
							{
								<MudTooltip Class="mx-1" Text="Thêm mới bài viết">
									<MudFab Class="mx-1" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium"
											Style="border:none;box-shadow:none;background-color:none;" Label="Tạo mới"
											@onclick="NavigateToCreatePostPage" />
								</MudTooltip>
							}
							else if (group.StateGroup == KindGroup.Restricted && isJoined == true)
							{
								<MudTooltip Class="mx-1" Text="Thêm mới bài viết">
									<MudFab Class="mx-1" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium"
											Style="border:none;box-shadow:none;background-color:none;" Label="Tạo mới"
											@onclick="NavigateToCreatePostPage" />
								</MudTooltip>
							}
						}

						<!-- Icon thông báo (chỉ hiển thị khi đã tham gia) -->
						@if (isJoined)
						{
							<MudIconButton Style="overflow:visible;">
								<MudBadge Color="Color.Tertiary" Overlap="true" Class="">
									<MudIcon Icon="@Icons.Material.Filled.Notifications">
									</MudIcon>
								</MudBadge>
							</MudIconButton>
						}
						@{
							if (IsAdmin == true)
							{
								<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="ClickMod">Công cụ mod</MudButton>
							}
							else
							{
								<!-- Nút trạng thái tham gia -->
								<MudButton Variant="Variant.Outlined" Color="Color.Secondary" Style="border-radius: 24px;"
										   @onclick="() => ToggleJoinStatus(group.IdGroup)">
									@buttonText
								</MudButton>
							}
						}
					</div>
				</div>
			</div>
		</MudItem>

		<div class="d-flex justify-content-between">
			<div class="ms-4" style="width:68% ; margin-top:-52px;">
				@foreach (var item in listIntroPost)
				{
					<PostIntro Avatar="@item.Avatar" Content="@item.Content"
							   CreateDate="@item.CreateDate" IdPost="@item.Id"
							   CommentCount="@item.CommentCount" Like="@item.Like"
							   VideoFile="@item.VideoFile" ImgFile="@item.ImgFile" UserName="@item.UserName" Title="@item.Title">
					</PostIntro>
				}
			</div>
			<div style="width:27%; height : 200px; position: sticky;top: 120px; border:none;" id="replaceHidden">
				<div id="another_unique_identifier" style="height:614px;">
					<div style="width:270px; background: #f4f8f5;border-radius:5px; margin-top: -16px">
						@{
							var day = group.DateTime.ToString("dd");
							var month = group.DateTime.ToString("MM");
							var year = group.DateTime.ToString("yyyy");

						}
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; font-weight:600;">@group.Name</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>

						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 6px; font-size:14px; color: #867a7a">@group.Description</MudText>
						<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; margin-bottom: 2px; font-size:13px; color: #605d5d	">
							Được tạo vào ngày @day tháng @month năm @year
						</MudText>
						
						@if (group.StateGroup == KindGroup.Public)
						{
							<MudItem Class="d-flex align-items-center " Style="margin-left: 9px; margin-bottom: 6px;">
								<MudIcon Icon="@Icons.Material.Filled.Public" Title="Public" Color="Color.Default" Style="font-size: 20px" />
								<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 7px; font-size:13px; color: #605d5d	">@groupState</MudText>
							</MudItem>
						}
						else if (group.StateGroup == KindGroup.Restricted)
						{
							<MudItem Class="d-flex align-items-center " Style="margin-left: 9px; margin-bottom: 6px;">
								<MudIcon Icon="@Icons.Material.Outlined.RemoveRedEye" Title="RemoveRedEye" Color="Color.Default" Style="font-size: 20px" />
								<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 7px; font-size:13px; color: #605d5d	">@groupState</MudText>
							</MudItem>
						}
						else
						{
							<MudItem Class="d-flex align-items-center" Style="margin-left: 9px; margin-bottom: 6px;">
								<MudIcon Icon="@Icons.Material.Outlined.Lock" Title="Lock" Color="Color.Default" Style="font-size: 20px" />
								<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 7px; font-size:13px; color: #605d5d	">@groupState</MudText>
							</MudItem>
						}

						<MudItem>
							<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; font-size:13px; color: #605d5d">
								<span class="spt">@memberCount</span> Thành viên
							</MudText>
							<MudText Variant="Variant.h6" Class="group-name" Style="margin-left: 10px; font-size:13px; color: #605d5d">
								tên nhóm <span style="color: red;">@Name</span>
							</MudText>
						</MudItem>
					</div>
				</div>
			</div>
		</div>
	</div>
	<script>
		function removeHiddenOverflow() {
			const element = document.querySelector('#replaceHidden');

			let currentElement = element.parentElement;

			// Lặp qua tất cả các thẻ cha của thẻ được chọn
			while (currentElement) {
				const overflowStyle = window.getComputedStyle(currentElement).overflow;


				// Kiểm tra nếu overflow là hidden
				console.log(overflowStyle)
				if (overflowStyle === 'hidden' || overflowStyle === 'auto' || overflowStyle === 'scroll' || overflowStyle === 'hidden auto') {
					currentElement.style.overflow = 'visible'; // Hoặc một giá trị phù hợp khác
				}

				// Chuyển sang thẻ cha tiếp theo
				currentElement = currentElement.parentElement;
			}
		}
		removeHiddenOverflow();
	</script>
}

@code {
	[Parameter]
	public string Name { get; set; }

	private Group? group;
	private bool isJoined;  // Biến lưu trạng thái tham gia
	private string buttonText = "Tham gia"; // Thay đổi nội dung của nút dựa trên trạng thái
	List<PostIntroDTO> listIntroPost;
	int memberCount = 0;
	bool IsAdmin { get; set; }
	string groupState;
	protected override async Task OnInitializedAsync()
	{
		await GetAdmin();
		var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var idUserCurrent = UserManager.GetUserId(user);
		var idUser = Guid.Parse(idUserCurrent);

		var result = await _httpClient.GetStringAsync($"/GetListPostIntro/{idUser}");

		var resultConverted = JsonConvert.DeserializeObject<List<PostIntroDTO>>(result);
		if (resultConverted != null)
		{
			listIntroPost = resultConverted;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		if (!string.IsNullOrEmpty(Name))
		{
			// Tìm nhóm trong cơ sở dữ liệu dựa trên tên nhóm từ URL
			group = await DbContext.Groups.FirstOrDefaultAsync(g => g.Name == Name);
			if (group != null)
			{
				if (group.StateGroup == KindGroup.Public)
				{
					groupState = "Công khai";
				}
				else if (group.StateGroup == KindGroup.Restricted)
				{
					groupState = "Hạn chế";
				}
				else
				{
					groupState = "Riêng tư";
				}
				// Kiểm tra nếu người dùng hiện tại đã tham gia nhóm hay chưa
				var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
				var user = authState.User;
				var userCurrent = UserManager.GetUserId(user);
				var memberId = Guid.Parse(userCurrent);
				await GetMember();
				buttonText = isJoined ? "Đã tham gia" : "Tham gia";
				await GetMemberCount();
				await GetAdmin();
				StateHasChanged();
			}
		}
	}


	private async Task GetMemberCount()
	{
		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
		var response = await httpClient.GetFromJsonAsync<int>($"api/group/member-count/{Name}");
		if (response != 0)
		{
			memberCount = response;
			Console.WriteLine($"Số lượng thành viên của nhóm {Name}: {response}");
		}
		else
		{
			Console.WriteLine("Không có dữ liệu hoặc số lượng thành viên bằng 0.");
		}
	}

	private async Task GetAdmin()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var userCurrent = UserManager.GetUserId(user);
		var currentUserId = Guid.Parse(userCurrent);
		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
		var response = await httpClient.GetAsync($"api/group/is-admin/{Name}?userId={currentUserId}");
		if (response.IsSuccessStatusCode)
		{
			// Gán kết quả trả về vào biến isAdmin
			IsAdmin = await response.Content.ReadFromJsonAsync<bool>();
		}
	}

	private async Task GetMember()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var userCurrent = UserManager.GetUserId(user);
		var currentUserId = Guid.Parse(userCurrent);
		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
		var response = await httpClient.GetAsync($"api/group/is-member/{Name}?userId={currentUserId}");
		if (response.IsSuccessStatusCode)
		{
			// Gán kết quả trả về vào biến isJoined
			isJoined = await response.Content.ReadFromJsonAsync<bool>();
		}
	}

	// Hàm xử lý sự kiện khi nhấn vào nút
	private async Task ToggleJoinStatus(Guid groupId)
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var userCurrent = UserManager.GetUserId(user);
		var memberId = Guid.Parse(userCurrent);  // Chuyển UserId thành Guid

		Console.WriteLine($"UserId từ UserManager: {memberId}");

		var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
		var response = await httpClient.PostAsJsonAsync("api/group/memberGroup", new
		{
			GroupId = groupId.ToString(),   // Chuyển GroupId thành chuỗi
			MemberId = memberId.ToString(), // Chuyển MemberId thành chuỗi
			Position = Data.Enums.Position.Member
		});

		if (response.IsSuccessStatusCode)
		{
			await GetMember();
			buttonText = isJoined ? "Đã tham gia" : "Tham gia";
			await GetMemberCount();
			StateHasChanged();
		}
		else
		{
			var errorContent = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Lỗi xảy ra: {response.StatusCode}. Chi tiết: {errorContent}");
		}

	}


	private void NavigateToCreatePostPage()
	{
		// Điều hướng đến trang tạo bài viết
		Navigation.NavigateTo("/createQuestion");
	}
	private void ClickMod()
	{
		var href = $"/groups/{Uri.EscapeDataString(Name)}/mod";
		Navigation.NavigateTo(href);
	}
}